// Code generated by go-swagger; DO NOT EDIT.

/*
 * Copyright (c) 2023 Baidu, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 *
 */

package metrics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetMetricsHandlerFunc turns a function with the right signature into a get metrics handler
type GetMetricsHandlerFunc func(GetMetricsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetMetricsHandlerFunc) Handle(params GetMetricsParams) middleware.Responder {
	return fn(params)
}

// GetMetricsHandler interface for that can handle valid get metrics params
type GetMetricsHandler interface {
	Handle(GetMetricsParams) middleware.Responder
}

// NewGetMetrics creates a new http.Handler for the get metrics operation
func NewGetMetrics(ctx *middleware.Context, handler GetMetricsHandler) *GetMetrics {
	return &GetMetrics{Context: ctx, Handler: handler}
}

/*
GetMetrics swagger:route GET /metrics/ metrics getMetrics

Retrieve cce operator metrics
*/
type GetMetrics struct {
	Context *middleware.Context
	Handler GetMetricsHandler
}

func (o *GetMetrics) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetMetricsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
