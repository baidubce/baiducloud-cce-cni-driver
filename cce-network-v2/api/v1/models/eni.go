// Code generated by go-swagger; DO NOT EDIT.

// /*
//  * Copyright (c) 2023 Baidu, Inc. All Rights Reserved.
//  *
//  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
//  * except in compliance with the License. You may obtain a copy of the License at
//  *
//  * http://www.apache.org/licenses/LICENSE-2.0
//  *
//  * Unless required by applicable law or agreed to in writing, software distributed under the
//  * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
//  * either express or implied. See the License for the specific language governing permissions
//  * and limitations under the License.
//  *
//  */

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ENI eni definition
//
// +k8s:deepcopy-gen=true
//
// swagger:model ENI
type ENI struct {

	// description
	Description string `json:"description,omitempty"`

	// enterprise security group ids
	EnterpriseSecurityGroupIds []string `json:"enterpriseSecurityGroupIds,omitempty"`

	// ID unique identifier available for the resource
	ID string `json:"id,omitempty"`

	// InstanceID insance ID of node resource, like ID of BCC.
	// This field represents the node name that ENI expects to attached.
	// Example:
	// i-wWANcEYK
	//
	InstanceID string `json:"instanceID,omitempty"`

	// ipv6 private IP set
	IPV6PrivateIPSet []*PrivateIP `json:"ipv6PrivateIPSet,omitempty"`

	// MacAddress mac address of eni instance
	// After the ENI is attached to the VM, the ENI device should be found in the
	// VM through this mac address
	// Example:
	// fa:26:00:0d:51:c7
	//
	MacAddress string `json:"macAddress,omitempty"`

	// The name of eni was created by CCE and format as {clusterID}-{instance_name}-{randmon}
	Name string `json:"name,omitempty"`

	// private IP set
	PrivateIPSet []*PrivateIP `json:"privateIPSet,omitempty"`

	// SecurityGroupIds list of security group IDs
	// An ENI should have at least one default security group
	// Example:
	// ["g-xpy9eitxhfib"]
	//
	SecurityGroupIds []string `json:"securityGroupIds,omitempty"`

	// SubnetID subnet id of eni instance
	// In scenarios where ENI is used across Subnet (such as PodSubnetTopologySpread), the subnet ID of ENI may
	// be different from secondry IP of the ENI.
	// Example:
	// sbn-na1y2xryjyf3
	//
	SubnetID string `json:"subnetID,omitempty"`

	// VPCID vpc id of eni instance
	// In scenarios where ENI is used across VPCs (such as BCI), the VPC ID of ENI may
	// be different from that of the cluster
	// Example:
	// vpc-8nh1ks7a55a2
	//
	VpcID string `json:"vpcID,omitempty"`

	// ZoneName zone name of eni instance
	ZoneName string `json:"zoneName,omitempty"`
}

// Validate validates this e n i
func (m *ENI) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIPV6PrivateIPSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateIPSet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ENI) validateIPV6PrivateIPSet(formats strfmt.Registry) error {

	if swag.IsZero(m.IPV6PrivateIPSet) { // not required
		return nil
	}

	for i := 0; i < len(m.IPV6PrivateIPSet); i++ {
		if swag.IsZero(m.IPV6PrivateIPSet[i]) { // not required
			continue
		}

		if m.IPV6PrivateIPSet[i] != nil {
			if err := m.IPV6PrivateIPSet[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ipv6PrivateIPSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ENI) validatePrivateIPSet(formats strfmt.Registry) error {

	if swag.IsZero(m.PrivateIPSet) { // not required
		return nil
	}

	for i := 0; i < len(m.PrivateIPSet); i++ {
		if swag.IsZero(m.PrivateIPSet[i]) { // not required
			continue
		}

		if m.PrivateIPSet[i] != nil {
			if err := m.PrivateIPSet[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("privateIPSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ENI) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ENI) UnmarshalBinary(b []byte) error {
	var res ENI
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
