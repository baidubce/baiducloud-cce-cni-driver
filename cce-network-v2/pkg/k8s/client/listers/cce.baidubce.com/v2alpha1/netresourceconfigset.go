/*
 * Copyright (c) 2023 Baidu, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 *
 */

// Code generated by lister-gen. DO NOT EDIT.

package v2alpha1

import (
	v2alpha1 "github.com/baidubce/baiducloud-cce-cni-driver/cce-network-v2/pkg/k8s/apis/cce.baidubce.com/v2alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NetResourceConfigSetLister helps list NetResourceConfigSets.
// All objects returned here must be treated as read-only.
type NetResourceConfigSetLister interface {
	// List lists all NetResourceConfigSets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v2alpha1.NetResourceConfigSet, err error)
	// Get retrieves the NetResourceConfigSet from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v2alpha1.NetResourceConfigSet, error)
	NetResourceConfigSetListerExpansion
}

// netResourceConfigSetLister implements the NetResourceConfigSetLister interface.
type netResourceConfigSetLister struct {
	indexer cache.Indexer
}

// NewNetResourceConfigSetLister returns a new NetResourceConfigSetLister.
func NewNetResourceConfigSetLister(indexer cache.Indexer) NetResourceConfigSetLister {
	return &netResourceConfigSetLister{indexer: indexer}
}

// List lists all NetResourceConfigSets in the indexer.
func (s *netResourceConfigSetLister) List(selector labels.Selector) (ret []*v2alpha1.NetResourceConfigSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v2alpha1.NetResourceConfigSet))
	})
	return ret, err
}

// Get retrieves the NetResourceConfigSet from the index for a given name.
func (s *netResourceConfigSetLister) Get(name string) (*v2alpha1.NetResourceConfigSet, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v2alpha1.Resource("netresourceconfigset"), name)
	}
	return obj.(*v2alpha1.NetResourceConfigSet), nil
}
