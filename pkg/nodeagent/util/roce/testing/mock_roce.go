// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/nodeagent/util/roce/roce.go

// Package testing is a generated GoMock package.
package testing

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRoCEProbe is a mock of IRoCEProbe interface.
type MockIRoCEProbe struct {
	ctrl     *gomock.Controller
	recorder *MockIRoCEProbeMockRecorder
}

// MockIRoCEProbeMockRecorder is the mock recorder for MockIRoCEProbe.
type MockIRoCEProbeMockRecorder struct {
	mock *MockIRoCEProbe
}

// NewMockIRoCEProbe creates a new mock instance.
func NewMockIRoCEProbe(ctrl *gomock.Controller) *MockIRoCEProbe {
	mock := &MockIRoCEProbe{ctrl: ctrl}
	mock.recorder = &MockIRoCEProbeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRoCEProbe) EXPECT() *MockIRoCEProbeMockRecorder {
	return m.recorder
}

// HasRoCEMellanox8Available mocks base method.
func (m *MockIRoCEProbe) HasRoCEMellanox8Available(ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasRoCEMellanox8Available", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasRoCEMellanox8Available indicates an expected call of HasRoCEMellanox8Available.
func (mr *MockIRoCEProbeMockRecorder) HasRoCEMellanox8Available(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasRoCEMellanox8Available", reflect.TypeOf((*MockIRoCEProbe)(nil).HasRoCEMellanox8Available), ctx)
}
