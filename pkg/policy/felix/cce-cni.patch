diff --git a/calc/calc_graph.go b/calc/calc_graph.go
index 0eaa6890..44cb874a 100644
--- a/calc/calc_graph.go
+++ b/calc/calc_graph.go
@@ -296,8 +296,9 @@ func NewCalculationGraph(callbacks PipelineCallbacks, hostname string) *CalcGrap
 	//         |
 	//      <dataplane>
 	//
-	configBatcher := NewConfigBatcher(hostname, callbacks)
-	configBatcher.RegisterWith(allUpdDispatcher)
+	// disable config processor for cce
+	//configBatcher := NewConfigBatcher(hostname, callbacks)
+	//configBatcher.RegisterWith(allUpdDispatcher)

 	// The profile decoder identifies objects with special dataplane significance which have
 	// been encoded as profiles by libcalico-go. At present this includes Kubernetes Service
diff --git a/daemon/daemon.go b/daemon/daemon.go
index b08a84c8..6c3e6746 100644
--- a/daemon/daemon.go
+++ b/daemon/daemon.go
@@ -119,7 +119,7 @@ func Run(configFile string) {
 	// Initialise early so we can trace out config parsing.
 	logutils.ConfigureEarlyLogging()

-	ctx := context.Background()
+	//ctx := context.Background()

 	if os.Getenv("GOGC") == "" {
 		// Tune the GC to trade off a little extra CPU usage for significantly lower
@@ -216,23 +216,23 @@ configRetry:
 		}
 		log.Info("Created datastore client")
 		numClientsCreated++
-		for {
-			globalConfig, hostConfig, err := loadConfigFromDatastore(
-				ctx, backendClient, configParams.FelixHostname)
-			if err == ErrNotReady {
-				log.Warn("Waiting for datastore to be initialized (or migrated)")
-				time.Sleep(1 * time.Second)
-				healthAggregator.Report(healthName, &health.HealthReport{Live: true, Ready: true})
-				continue
-			} else if err != nil {
-				log.WithError(err).Error("Failed to get config from datastore")
-				time.Sleep(1 * time.Second)
-				continue configRetry
-			}
-			configParams.UpdateFrom(globalConfig, config.DatastoreGlobal)
-			configParams.UpdateFrom(hostConfig, config.DatastorePerHost)
-			break
-		}
+		//for {
+		//	globalConfig, hostConfig, err := loadConfigFromDatastore(
+		//		ctx, backendClient, configParams.FelixHostname)
+		//	if err == ErrNotReady {
+		//		log.Warn("Waiting for datastore to be initialized (or migrated)")
+		//		time.Sleep(1 * time.Second)
+		//		healthAggregator.Report(healthName, &health.HealthReport{Live: true, Ready: true})
+		//		continue
+		//	} else if err != nil {
+		//		log.WithError(err).Error("Failed to get config from datastore")
+		//		time.Sleep(1 * time.Second)
+		//		continue configRetry
+		//	}
+		//	configParams.UpdateFrom(globalConfig, config.DatastoreGlobal)
+		//	configParams.UpdateFrom(hostConfig, config.DatastorePerHost)
+		//	break
+		//}
 		configParams.Validate()
 		if configParams.Err != nil {
 			log.WithError(configParams.Err).Error(
diff --git a/dataplane/linux/endpoint_mgr.go b/dataplane/linux/endpoint_mgr.go
index baeb37e8..60e76f6d 100644
--- a/dataplane/linux/endpoint_mgr.go
+++ b/dataplane/linux/endpoint_mgr.go
@@ -520,15 +520,15 @@ func (m *endpointManager) resolveWorkloadEndpoints() {
 		m.needToCheckEndpointMarkChains = true
 	}

-	m.wlIfaceNamesToReconfigure.Iter(func(item interface{}) error {
-		ifaceName := item.(string)
-		err := m.configureInterface(ifaceName)
-		if err != nil {
-			log.WithError(err).Warn("Failed to configure interface, will retry")
-			return nil
-		}
-		return set.RemoveItem
-	})
+	//m.wlIfaceNamesToReconfigure.Iter(func(item interface{}) error {
+	//	ifaceName := item.(string)
+	//	err := m.configureInterface(ifaceName)
+	//	if err != nil {
+	//		log.WithError(err).Warn("Failed to configure interface, will retry")
+	//		return nil
+	//	}
+	//	return set.RemoveItem
+	//})
 }

 func (m *endpointManager) resolveEndpointMarks() {
diff --git a/dataplane/linux/int_dataplane.go b/dataplane/linux/int_dataplane.go
index 92b3183c..94dd252b 100644
--- a/dataplane/linux/int_dataplane.go
+++ b/dataplane/linux/int_dataplane.go
@@ -532,7 +532,7 @@ func (d *InternalDataplane) doStaticDataplaneConfig() {
 	// Endure that the default value of rp_filter is set to "strict" for newly-created
 	// interfaces.  This is required to prevent a race between starting an interface and
 	// Felix being able to configure it.
-	writeProcSys("/proc/sys/net/ipv4/conf/default/rp_filter", "1")
+	//writeProcSys("/proc/sys/net/ipv4/conf/default/rp_filter", "1")

 	for _, t := range d.iptablesRawTables {
 		rawChains := d.ruleRenderer.StaticRawTableChains(t.IPVersion)
@@ -832,7 +832,7 @@ func (d *InternalDataplane) configureKernel() {

 	// Make sure the default for new interfaces is set to strict checking so that there's no
 	// race when a new interface is added and felix hasn't configured it yet.
-	writeProcSys("/proc/sys/net/ipv4/conf/default/rp_filter", "1")
+	//writeProcSys("/proc/sys/net/ipv4/conf/default/rp_filter", "1")
 }

 func readRPFilter() (value int64, err error) {
diff --git a/glide.yaml b/glide.yaml
index 52fdf3ff..1df57854 100644
--- a/glide.yaml
+++ b/glide.yaml
@@ -22,6 +22,11 @@ import:
   version: b4deda0973fb4c70b50d226b1af49f3da59f5265
   subpackages:
   - proto
+- name: google.golang.org/genproto
+  version: 09f6ed296fc66555a25fe4ce95173148778dfa85
+  repo: https://github.com/google/go-genproto
+  subpackages:
+  - googleapis/rpc/status
 - package: github.com/jbenet/go-reuseport
 # go-reuseport pulls in go-log without a pin and master is now incompatible with the
 # version of gogo/protobuf that we are using.  Pin to most recent working master revision.
