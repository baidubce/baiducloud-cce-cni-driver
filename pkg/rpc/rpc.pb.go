// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/rpc/rpc.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IPType int32

const (
	IPType_BCCMultiENIMultiIPType   IPType = 0
	IPType_BBCPrimaryENIMultiIPType IPType = 1
	IPType_CrossVPCENIIPType        IPType = 2
)

var IPType_name = map[int32]string{
	0: "BCCMultiENIMultiIPType",
	1: "BBCPrimaryENIMultiIPType",
	2: "CrossVPCENIIPType",
}

var IPType_value = map[string]int32{
	"BCCMultiENIMultiIPType":   0,
	"BBCPrimaryENIMultiIPType": 1,
	"CrossVPCENIIPType":        2,
}

func (x IPType) String() string {
	return proto.EnumName(IPType_name, int32(x))
}

func (IPType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bd1e66095a603e73, []int{0}
}

type AllocateIPRequest struct {
	K8SPodName             string `protobuf:"bytes,1,opt,name=K8sPodName,proto3" json:"K8sPodName,omitempty"`
	K8SPodNamespace        string `protobuf:"bytes,2,opt,name=K8sPodNamespace,proto3" json:"K8sPodNamespace,omitempty"`
	K8SPodInfraContainerID string `protobuf:"bytes,3,opt,name=K8sPodInfraContainerID,proto3" json:"K8sPodInfraContainerID,omitempty"`
	Netns                  string `protobuf:"bytes,4,opt,name=Netns,proto3" json:"Netns,omitempty"`
	IfName                 string `protobuf:"bytes,5,opt,name=IfName,proto3" json:"IfName,omitempty"`
	K8SNodeName            string `protobuf:"bytes,6,opt,name=K8sNodeName,proto3" json:"K8sNodeName,omitempty"`
	IPType                 IPType `protobuf:"varint,7,opt,name=IPType,proto3,enum=rpc.IPType" json:"IPType,omitempty"`
	// Types that are valid to be assigned to NetworkInfo:
	//	*AllocateIPRequest_ENIMultiIP
	//	*AllocateIPRequest_CrossVPCENI
	NetworkInfo          isAllocateIPRequest_NetworkInfo `protobuf_oneof:"NetworkInfo"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *AllocateIPRequest) Reset()         { *m = AllocateIPRequest{} }
func (m *AllocateIPRequest) String() string { return proto.CompactTextString(m) }
func (*AllocateIPRequest) ProtoMessage()    {}
func (*AllocateIPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd1e66095a603e73, []int{0}
}

func (m *AllocateIPRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllocateIPRequest.Unmarshal(m, b)
}
func (m *AllocateIPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllocateIPRequest.Marshal(b, m, deterministic)
}
func (m *AllocateIPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocateIPRequest.Merge(m, src)
}
func (m *AllocateIPRequest) XXX_Size() int {
	return xxx_messageInfo_AllocateIPRequest.Size(m)
}
func (m *AllocateIPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocateIPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AllocateIPRequest proto.InternalMessageInfo

func (m *AllocateIPRequest) GetK8SPodName() string {
	if m != nil {
		return m.K8SPodName
	}
	return ""
}

func (m *AllocateIPRequest) GetK8SPodNamespace() string {
	if m != nil {
		return m.K8SPodNamespace
	}
	return ""
}

func (m *AllocateIPRequest) GetK8SPodInfraContainerID() string {
	if m != nil {
		return m.K8SPodInfraContainerID
	}
	return ""
}

func (m *AllocateIPRequest) GetNetns() string {
	if m != nil {
		return m.Netns
	}
	return ""
}

func (m *AllocateIPRequest) GetIfName() string {
	if m != nil {
		return m.IfName
	}
	return ""
}

func (m *AllocateIPRequest) GetK8SNodeName() string {
	if m != nil {
		return m.K8SNodeName
	}
	return ""
}

func (m *AllocateIPRequest) GetIPType() IPType {
	if m != nil {
		return m.IPType
	}
	return IPType_BCCMultiENIMultiIPType
}

type isAllocateIPRequest_NetworkInfo interface {
	isAllocateIPRequest_NetworkInfo()
}

type AllocateIPRequest_ENIMultiIP struct {
	ENIMultiIP *ENIMultiIPRequest `protobuf:"bytes,8,opt,name=ENIMultiIP,proto3,oneof"`
}

type AllocateIPRequest_CrossVPCENI struct {
	CrossVPCENI *CrossVPCENIRequest `protobuf:"bytes,9,opt,name=CrossVPCENI,proto3,oneof"`
}

func (*AllocateIPRequest_ENIMultiIP) isAllocateIPRequest_NetworkInfo() {}

func (*AllocateIPRequest_CrossVPCENI) isAllocateIPRequest_NetworkInfo() {}

func (m *AllocateIPRequest) GetNetworkInfo() isAllocateIPRequest_NetworkInfo {
	if m != nil {
		return m.NetworkInfo
	}
	return nil
}

func (m *AllocateIPRequest) GetENIMultiIP() *ENIMultiIPRequest {
	if x, ok := m.GetNetworkInfo().(*AllocateIPRequest_ENIMultiIP); ok {
		return x.ENIMultiIP
	}
	return nil
}

func (m *AllocateIPRequest) GetCrossVPCENI() *CrossVPCENIRequest {
	if x, ok := m.GetNetworkInfo().(*AllocateIPRequest_CrossVPCENI); ok {
		return x.CrossVPCENI
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AllocateIPRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AllocateIPRequest_ENIMultiIP)(nil),
		(*AllocateIPRequest_CrossVPCENI)(nil),
	}
}

type AllocateIPReply struct {
	IsSuccess bool   `protobuf:"varint,1,opt,name=IsSuccess,proto3" json:"IsSuccess,omitempty"`
	ErrMsg    string `protobuf:"bytes,2,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`
	IPType    IPType `protobuf:"varint,3,opt,name=IPType,proto3,enum=rpc.IPType" json:"IPType,omitempty"`
	// Types that are valid to be assigned to NetworkInfo:
	//	*AllocateIPReply_ENIMultiIP
	//	*AllocateIPReply_CrossVPCENI
	NetworkInfo          isAllocateIPReply_NetworkInfo `protobuf_oneof:"NetworkInfo"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *AllocateIPReply) Reset()         { *m = AllocateIPReply{} }
func (m *AllocateIPReply) String() string { return proto.CompactTextString(m) }
func (*AllocateIPReply) ProtoMessage()    {}
func (*AllocateIPReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd1e66095a603e73, []int{1}
}

func (m *AllocateIPReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllocateIPReply.Unmarshal(m, b)
}
func (m *AllocateIPReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllocateIPReply.Marshal(b, m, deterministic)
}
func (m *AllocateIPReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocateIPReply.Merge(m, src)
}
func (m *AllocateIPReply) XXX_Size() int {
	return xxx_messageInfo_AllocateIPReply.Size(m)
}
func (m *AllocateIPReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocateIPReply.DiscardUnknown(m)
}

var xxx_messageInfo_AllocateIPReply proto.InternalMessageInfo

func (m *AllocateIPReply) GetIsSuccess() bool {
	if m != nil {
		return m.IsSuccess
	}
	return false
}

func (m *AllocateIPReply) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *AllocateIPReply) GetIPType() IPType {
	if m != nil {
		return m.IPType
	}
	return IPType_BCCMultiENIMultiIPType
}

type isAllocateIPReply_NetworkInfo interface {
	isAllocateIPReply_NetworkInfo()
}

type AllocateIPReply_ENIMultiIP struct {
	ENIMultiIP *ENIMultiIPReply `protobuf:"bytes,4,opt,name=ENIMultiIP,proto3,oneof"`
}

type AllocateIPReply_CrossVPCENI struct {
	CrossVPCENI *CrossVPCENIReply `protobuf:"bytes,5,opt,name=CrossVPCENI,proto3,oneof"`
}

func (*AllocateIPReply_ENIMultiIP) isAllocateIPReply_NetworkInfo() {}

func (*AllocateIPReply_CrossVPCENI) isAllocateIPReply_NetworkInfo() {}

func (m *AllocateIPReply) GetNetworkInfo() isAllocateIPReply_NetworkInfo {
	if m != nil {
		return m.NetworkInfo
	}
	return nil
}

func (m *AllocateIPReply) GetENIMultiIP() *ENIMultiIPReply {
	if x, ok := m.GetNetworkInfo().(*AllocateIPReply_ENIMultiIP); ok {
		return x.ENIMultiIP
	}
	return nil
}

func (m *AllocateIPReply) GetCrossVPCENI() *CrossVPCENIReply {
	if x, ok := m.GetNetworkInfo().(*AllocateIPReply_CrossVPCENI); ok {
		return x.CrossVPCENI
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AllocateIPReply) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AllocateIPReply_ENIMultiIP)(nil),
		(*AllocateIPReply_CrossVPCENI)(nil),
	}
}

type ReleaseIPRequest struct {
	K8SPodName             string `protobuf:"bytes,1,opt,name=K8sPodName,proto3" json:"K8sPodName,omitempty"`
	K8SPodNamespace        string `protobuf:"bytes,2,opt,name=K8sPodNamespace,proto3" json:"K8sPodNamespace,omitempty"`
	K8SPodInfraContainerID string `protobuf:"bytes,3,opt,name=K8sPodInfraContainerID,proto3" json:"K8sPodInfraContainerID,omitempty"`
	Netns                  string `protobuf:"bytes,4,opt,name=Netns,proto3" json:"Netns,omitempty"`
	IfName                 string `protobuf:"bytes,5,opt,name=IfName,proto3" json:"IfName,omitempty"`
	K8SNodeName            string `protobuf:"bytes,6,opt,name=K8sNodeName,proto3" json:"K8sNodeName,omitempty"`
	IPType                 IPType `protobuf:"varint,7,opt,name=IPType,proto3,enum=rpc.IPType" json:"IPType,omitempty"`
	// Types that are valid to be assigned to NetworkInfo:
	//	*ReleaseIPRequest_ENIMultiIP
	//	*ReleaseIPRequest_CrossVPCENI
	NetworkInfo          isReleaseIPRequest_NetworkInfo `protobuf_oneof:"NetworkInfo"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *ReleaseIPRequest) Reset()         { *m = ReleaseIPRequest{} }
func (m *ReleaseIPRequest) String() string { return proto.CompactTextString(m) }
func (*ReleaseIPRequest) ProtoMessage()    {}
func (*ReleaseIPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd1e66095a603e73, []int{2}
}

func (m *ReleaseIPRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseIPRequest.Unmarshal(m, b)
}
func (m *ReleaseIPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseIPRequest.Marshal(b, m, deterministic)
}
func (m *ReleaseIPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseIPRequest.Merge(m, src)
}
func (m *ReleaseIPRequest) XXX_Size() int {
	return xxx_messageInfo_ReleaseIPRequest.Size(m)
}
func (m *ReleaseIPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseIPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseIPRequest proto.InternalMessageInfo

func (m *ReleaseIPRequest) GetK8SPodName() string {
	if m != nil {
		return m.K8SPodName
	}
	return ""
}

func (m *ReleaseIPRequest) GetK8SPodNamespace() string {
	if m != nil {
		return m.K8SPodNamespace
	}
	return ""
}

func (m *ReleaseIPRequest) GetK8SPodInfraContainerID() string {
	if m != nil {
		return m.K8SPodInfraContainerID
	}
	return ""
}

func (m *ReleaseIPRequest) GetNetns() string {
	if m != nil {
		return m.Netns
	}
	return ""
}

func (m *ReleaseIPRequest) GetIfName() string {
	if m != nil {
		return m.IfName
	}
	return ""
}

func (m *ReleaseIPRequest) GetK8SNodeName() string {
	if m != nil {
		return m.K8SNodeName
	}
	return ""
}

func (m *ReleaseIPRequest) GetIPType() IPType {
	if m != nil {
		return m.IPType
	}
	return IPType_BCCMultiENIMultiIPType
}

type isReleaseIPRequest_NetworkInfo interface {
	isReleaseIPRequest_NetworkInfo()
}

type ReleaseIPRequest_ENIMultiIP struct {
	ENIMultiIP *ENIMultiIPRequest `protobuf:"bytes,8,opt,name=ENIMultiIP,proto3,oneof"`
}

type ReleaseIPRequest_CrossVPCENI struct {
	CrossVPCENI *CrossVPCENIRequest `protobuf:"bytes,9,opt,name=CrossVPCENI,proto3,oneof"`
}

func (*ReleaseIPRequest_ENIMultiIP) isReleaseIPRequest_NetworkInfo() {}

func (*ReleaseIPRequest_CrossVPCENI) isReleaseIPRequest_NetworkInfo() {}

func (m *ReleaseIPRequest) GetNetworkInfo() isReleaseIPRequest_NetworkInfo {
	if m != nil {
		return m.NetworkInfo
	}
	return nil
}

func (m *ReleaseIPRequest) GetENIMultiIP() *ENIMultiIPRequest {
	if x, ok := m.GetNetworkInfo().(*ReleaseIPRequest_ENIMultiIP); ok {
		return x.ENIMultiIP
	}
	return nil
}

func (m *ReleaseIPRequest) GetCrossVPCENI() *CrossVPCENIRequest {
	if x, ok := m.GetNetworkInfo().(*ReleaseIPRequest_CrossVPCENI); ok {
		return x.CrossVPCENI
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReleaseIPRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReleaseIPRequest_ENIMultiIP)(nil),
		(*ReleaseIPRequest_CrossVPCENI)(nil),
	}
}

type ReleaseIPReply struct {
	IsSuccess bool   `protobuf:"varint,1,opt,name=IsSuccess,proto3" json:"IsSuccess,omitempty"`
	ErrMsg    string `protobuf:"bytes,2,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`
	IPType    IPType `protobuf:"varint,3,opt,name=IPType,proto3,enum=rpc.IPType" json:"IPType,omitempty"`
	// Types that are valid to be assigned to NetworkInfo:
	//	*ReleaseIPReply_ENIMultiIP
	//	*ReleaseIPReply_CrossVPCENI
	NetworkInfo          isReleaseIPReply_NetworkInfo `protobuf_oneof:"NetworkInfo"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *ReleaseIPReply) Reset()         { *m = ReleaseIPReply{} }
func (m *ReleaseIPReply) String() string { return proto.CompactTextString(m) }
func (*ReleaseIPReply) ProtoMessage()    {}
func (*ReleaseIPReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd1e66095a603e73, []int{3}
}

func (m *ReleaseIPReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseIPReply.Unmarshal(m, b)
}
func (m *ReleaseIPReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseIPReply.Marshal(b, m, deterministic)
}
func (m *ReleaseIPReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseIPReply.Merge(m, src)
}
func (m *ReleaseIPReply) XXX_Size() int {
	return xxx_messageInfo_ReleaseIPReply.Size(m)
}
func (m *ReleaseIPReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseIPReply.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseIPReply proto.InternalMessageInfo

func (m *ReleaseIPReply) GetIsSuccess() bool {
	if m != nil {
		return m.IsSuccess
	}
	return false
}

func (m *ReleaseIPReply) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *ReleaseIPReply) GetIPType() IPType {
	if m != nil {
		return m.IPType
	}
	return IPType_BCCMultiENIMultiIPType
}

type isReleaseIPReply_NetworkInfo interface {
	isReleaseIPReply_NetworkInfo()
}

type ReleaseIPReply_ENIMultiIP struct {
	ENIMultiIP *ENIMultiIPReply `protobuf:"bytes,4,opt,name=ENIMultiIP,proto3,oneof"`
}

type ReleaseIPReply_CrossVPCENI struct {
	CrossVPCENI *CrossVPCENIReply `protobuf:"bytes,5,opt,name=CrossVPCENI,proto3,oneof"`
}

func (*ReleaseIPReply_ENIMultiIP) isReleaseIPReply_NetworkInfo() {}

func (*ReleaseIPReply_CrossVPCENI) isReleaseIPReply_NetworkInfo() {}

func (m *ReleaseIPReply) GetNetworkInfo() isReleaseIPReply_NetworkInfo {
	if m != nil {
		return m.NetworkInfo
	}
	return nil
}

func (m *ReleaseIPReply) GetENIMultiIP() *ENIMultiIPReply {
	if x, ok := m.GetNetworkInfo().(*ReleaseIPReply_ENIMultiIP); ok {
		return x.ENIMultiIP
	}
	return nil
}

func (m *ReleaseIPReply) GetCrossVPCENI() *CrossVPCENIReply {
	if x, ok := m.GetNetworkInfo().(*ReleaseIPReply_CrossVPCENI); ok {
		return x.CrossVPCENI
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReleaseIPReply) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReleaseIPReply_ENIMultiIP)(nil),
		(*ReleaseIPReply_CrossVPCENI)(nil),
	}
}

type CheckIPRequest struct {
	K8SPodName             string `protobuf:"bytes,1,opt,name=K8sPodName,proto3" json:"K8sPodName,omitempty"`
	K8SPodNamespace        string `protobuf:"bytes,2,opt,name=K8sPodNamespace,proto3" json:"K8sPodNamespace,omitempty"`
	K8SPodInfraContainerID string `protobuf:"bytes,3,opt,name=K8sPodInfraContainerID,proto3" json:"K8sPodInfraContainerID,omitempty"`
	Netns                  string `protobuf:"bytes,4,opt,name=Netns,proto3" json:"Netns,omitempty"`
	IfName                 string `protobuf:"bytes,5,opt,name=IfName,proto3" json:"IfName,omitempty"`
	K8SNodeName            string `protobuf:"bytes,6,opt,name=K8sNodeName,proto3" json:"K8sNodeName,omitempty"`
	// Types that are valid to be assigned to NetworkInfo:
	//	*CheckIPRequest_ENIMultiIP
	//	*CheckIPRequest_CrossVPCENI
	NetworkInfo          isCheckIPRequest_NetworkInfo `protobuf_oneof:"NetworkInfo"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *CheckIPRequest) Reset()         { *m = CheckIPRequest{} }
func (m *CheckIPRequest) String() string { return proto.CompactTextString(m) }
func (*CheckIPRequest) ProtoMessage()    {}
func (*CheckIPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd1e66095a603e73, []int{4}
}

func (m *CheckIPRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckIPRequest.Unmarshal(m, b)
}
func (m *CheckIPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckIPRequest.Marshal(b, m, deterministic)
}
func (m *CheckIPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckIPRequest.Merge(m, src)
}
func (m *CheckIPRequest) XXX_Size() int {
	return xxx_messageInfo_CheckIPRequest.Size(m)
}
func (m *CheckIPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckIPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckIPRequest proto.InternalMessageInfo

func (m *CheckIPRequest) GetK8SPodName() string {
	if m != nil {
		return m.K8SPodName
	}
	return ""
}

func (m *CheckIPRequest) GetK8SPodNamespace() string {
	if m != nil {
		return m.K8SPodNamespace
	}
	return ""
}

func (m *CheckIPRequest) GetK8SPodInfraContainerID() string {
	if m != nil {
		return m.K8SPodInfraContainerID
	}
	return ""
}

func (m *CheckIPRequest) GetNetns() string {
	if m != nil {
		return m.Netns
	}
	return ""
}

func (m *CheckIPRequest) GetIfName() string {
	if m != nil {
		return m.IfName
	}
	return ""
}

func (m *CheckIPRequest) GetK8SNodeName() string {
	if m != nil {
		return m.K8SNodeName
	}
	return ""
}

type isCheckIPRequest_NetworkInfo interface {
	isCheckIPRequest_NetworkInfo()
}

type CheckIPRequest_ENIMultiIP struct {
	ENIMultiIP *ENIMultiIPRequest `protobuf:"bytes,7,opt,name=ENIMultiIP,proto3,oneof"`
}

type CheckIPRequest_CrossVPCENI struct {
	CrossVPCENI *CrossVPCENIRequest `protobuf:"bytes,8,opt,name=CrossVPCENI,proto3,oneof"`
}

func (*CheckIPRequest_ENIMultiIP) isCheckIPRequest_NetworkInfo() {}

func (*CheckIPRequest_CrossVPCENI) isCheckIPRequest_NetworkInfo() {}

func (m *CheckIPRequest) GetNetworkInfo() isCheckIPRequest_NetworkInfo {
	if m != nil {
		return m.NetworkInfo
	}
	return nil
}

func (m *CheckIPRequest) GetENIMultiIP() *ENIMultiIPRequest {
	if x, ok := m.GetNetworkInfo().(*CheckIPRequest_ENIMultiIP); ok {
		return x.ENIMultiIP
	}
	return nil
}

func (m *CheckIPRequest) GetCrossVPCENI() *CrossVPCENIRequest {
	if x, ok := m.GetNetworkInfo().(*CheckIPRequest_CrossVPCENI); ok {
		return x.CrossVPCENI
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CheckIPRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CheckIPRequest_ENIMultiIP)(nil),
		(*CheckIPRequest_CrossVPCENI)(nil),
	}
}

type CheckIPReply struct {
	IsSuccess bool   `protobuf:"varint,1,opt,name=IsSuccess,proto3" json:"IsSuccess,omitempty"`
	ErrMsg    string `protobuf:"bytes,2,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`
	IPType    IPType `protobuf:"varint,3,opt,name=IPType,proto3,enum=rpc.IPType" json:"IPType,omitempty"`
	// Types that are valid to be assigned to NetworkInfo:
	//	*CheckIPReply_ENIMultiIP
	//	*CheckIPReply_CrossVPCENI
	NetworkInfo          isCheckIPReply_NetworkInfo `protobuf_oneof:"NetworkInfo"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *CheckIPReply) Reset()         { *m = CheckIPReply{} }
func (m *CheckIPReply) String() string { return proto.CompactTextString(m) }
func (*CheckIPReply) ProtoMessage()    {}
func (*CheckIPReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd1e66095a603e73, []int{5}
}

func (m *CheckIPReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckIPReply.Unmarshal(m, b)
}
func (m *CheckIPReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckIPReply.Marshal(b, m, deterministic)
}
func (m *CheckIPReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckIPReply.Merge(m, src)
}
func (m *CheckIPReply) XXX_Size() int {
	return xxx_messageInfo_CheckIPReply.Size(m)
}
func (m *CheckIPReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckIPReply.DiscardUnknown(m)
}

var xxx_messageInfo_CheckIPReply proto.InternalMessageInfo

func (m *CheckIPReply) GetIsSuccess() bool {
	if m != nil {
		return m.IsSuccess
	}
	return false
}

func (m *CheckIPReply) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *CheckIPReply) GetIPType() IPType {
	if m != nil {
		return m.IPType
	}
	return IPType_BCCMultiENIMultiIPType
}

type isCheckIPReply_NetworkInfo interface {
	isCheckIPReply_NetworkInfo()
}

type CheckIPReply_ENIMultiIP struct {
	ENIMultiIP *ENIMultiIPReply `protobuf:"bytes,4,opt,name=ENIMultiIP,proto3,oneof"`
}

type CheckIPReply_CrossVPCENI struct {
	CrossVPCENI *CrossVPCENIReply `protobuf:"bytes,5,opt,name=CrossVPCENI,proto3,oneof"`
}

func (*CheckIPReply_ENIMultiIP) isCheckIPReply_NetworkInfo() {}

func (*CheckIPReply_CrossVPCENI) isCheckIPReply_NetworkInfo() {}

func (m *CheckIPReply) GetNetworkInfo() isCheckIPReply_NetworkInfo {
	if m != nil {
		return m.NetworkInfo
	}
	return nil
}

func (m *CheckIPReply) GetENIMultiIP() *ENIMultiIPReply {
	if x, ok := m.GetNetworkInfo().(*CheckIPReply_ENIMultiIP); ok {
		return x.ENIMultiIP
	}
	return nil
}

func (m *CheckIPReply) GetCrossVPCENI() *CrossVPCENIReply {
	if x, ok := m.GetNetworkInfo().(*CheckIPReply_CrossVPCENI); ok {
		return x.CrossVPCENI
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CheckIPReply) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CheckIPReply_ENIMultiIP)(nil),
		(*CheckIPReply_CrossVPCENI)(nil),
	}
}

type ENIMultiIPRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ENIMultiIPRequest) Reset()         { *m = ENIMultiIPRequest{} }
func (m *ENIMultiIPRequest) String() string { return proto.CompactTextString(m) }
func (*ENIMultiIPRequest) ProtoMessage()    {}
func (*ENIMultiIPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd1e66095a603e73, []int{6}
}

func (m *ENIMultiIPRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ENIMultiIPRequest.Unmarshal(m, b)
}
func (m *ENIMultiIPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ENIMultiIPRequest.Marshal(b, m, deterministic)
}
func (m *ENIMultiIPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ENIMultiIPRequest.Merge(m, src)
}
func (m *ENIMultiIPRequest) XXX_Size() int {
	return xxx_messageInfo_ENIMultiIPRequest.Size(m)
}
func (m *ENIMultiIPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ENIMultiIPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ENIMultiIPRequest proto.InternalMessageInfo

type ENIMultiIPReply struct {
	IP                   string   `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Mac                  string   `protobuf:"bytes,3,opt,name=Mac,proto3" json:"Mac,omitempty"`
	Gw                   string   `protobuf:"bytes,4,opt,name=Gw,proto3" json:"Gw,omitempty"`
	ENIID                string   `protobuf:"bytes,5,opt,name=ENIID,proto3" json:"ENIID,omitempty"`
	Node                 string   `protobuf:"bytes,6,opt,name=Node,proto3" json:"Node,omitempty"`
	SubnetID             string   `protobuf:"bytes,7,opt,name=SubnetID,proto3" json:"SubnetID,omitempty"`
	EnableFixIP          string   `protobuf:"bytes,8,opt,name=EnableFixIP,proto3" json:"EnableFixIP,omitempty"`
	FixIPDeletePolicy    string   `protobuf:"bytes,9,opt,name=FixIPDeletePolicy,proto3" json:"FixIPDeletePolicy,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ENIMultiIPReply) Reset()         { *m = ENIMultiIPReply{} }
func (m *ENIMultiIPReply) String() string { return proto.CompactTextString(m) }
func (*ENIMultiIPReply) ProtoMessage()    {}
func (*ENIMultiIPReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd1e66095a603e73, []int{7}
}

func (m *ENIMultiIPReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ENIMultiIPReply.Unmarshal(m, b)
}
func (m *ENIMultiIPReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ENIMultiIPReply.Marshal(b, m, deterministic)
}
func (m *ENIMultiIPReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ENIMultiIPReply.Merge(m, src)
}
func (m *ENIMultiIPReply) XXX_Size() int {
	return xxx_messageInfo_ENIMultiIPReply.Size(m)
}
func (m *ENIMultiIPReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ENIMultiIPReply.DiscardUnknown(m)
}

var xxx_messageInfo_ENIMultiIPReply proto.InternalMessageInfo

func (m *ENIMultiIPReply) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *ENIMultiIPReply) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ENIMultiIPReply) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *ENIMultiIPReply) GetGw() string {
	if m != nil {
		return m.Gw
	}
	return ""
}

func (m *ENIMultiIPReply) GetENIID() string {
	if m != nil {
		return m.ENIID
	}
	return ""
}

func (m *ENIMultiIPReply) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *ENIMultiIPReply) GetSubnetID() string {
	if m != nil {
		return m.SubnetID
	}
	return ""
}

func (m *ENIMultiIPReply) GetEnableFixIP() string {
	if m != nil {
		return m.EnableFixIP
	}
	return ""
}

func (m *ENIMultiIPReply) GetFixIPDeletePolicy() string {
	if m != nil {
		return m.FixIPDeletePolicy
	}
	return ""
}

type CrossVPCENIRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CrossVPCENIRequest) Reset()         { *m = CrossVPCENIRequest{} }
func (m *CrossVPCENIRequest) String() string { return proto.CompactTextString(m) }
func (*CrossVPCENIRequest) ProtoMessage()    {}
func (*CrossVPCENIRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd1e66095a603e73, []int{8}
}

func (m *CrossVPCENIRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrossVPCENIRequest.Unmarshal(m, b)
}
func (m *CrossVPCENIRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrossVPCENIRequest.Marshal(b, m, deterministic)
}
func (m *CrossVPCENIRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossVPCENIRequest.Merge(m, src)
}
func (m *CrossVPCENIRequest) XXX_Size() int {
	return xxx_messageInfo_CrossVPCENIRequest.Size(m)
}
func (m *CrossVPCENIRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossVPCENIRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CrossVPCENIRequest proto.InternalMessageInfo

type CrossVPCENIReply struct {
	IP                   string   `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
	Mac                  string   `protobuf:"bytes,2,opt,name=Mac,proto3" json:"Mac,omitempty"`
	VPCCIDR              string   `protobuf:"bytes,3,opt,name=VPCCIDR,proto3" json:"VPCCIDR,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CrossVPCENIReply) Reset()         { *m = CrossVPCENIReply{} }
func (m *CrossVPCENIReply) String() string { return proto.CompactTextString(m) }
func (*CrossVPCENIReply) ProtoMessage()    {}
func (*CrossVPCENIReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd1e66095a603e73, []int{9}
}

func (m *CrossVPCENIReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrossVPCENIReply.Unmarshal(m, b)
}
func (m *CrossVPCENIReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrossVPCENIReply.Marshal(b, m, deterministic)
}
func (m *CrossVPCENIReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossVPCENIReply.Merge(m, src)
}
func (m *CrossVPCENIReply) XXX_Size() int {
	return xxx_messageInfo_CrossVPCENIReply.Size(m)
}
func (m *CrossVPCENIReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossVPCENIReply.DiscardUnknown(m)
}

var xxx_messageInfo_CrossVPCENIReply proto.InternalMessageInfo

func (m *CrossVPCENIReply) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *CrossVPCENIReply) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *CrossVPCENIReply) GetVPCCIDR() string {
	if m != nil {
		return m.VPCCIDR
	}
	return ""
}

func init() {
	proto.RegisterEnum("rpc.IPType", IPType_name, IPType_value)
	proto.RegisterType((*AllocateIPRequest)(nil), "rpc.AllocateIPRequest")
	proto.RegisterType((*AllocateIPReply)(nil), "rpc.AllocateIPReply")
	proto.RegisterType((*ReleaseIPRequest)(nil), "rpc.ReleaseIPRequest")
	proto.RegisterType((*ReleaseIPReply)(nil), "rpc.ReleaseIPReply")
	proto.RegisterType((*CheckIPRequest)(nil), "rpc.CheckIPRequest")
	proto.RegisterType((*CheckIPReply)(nil), "rpc.CheckIPReply")
	proto.RegisterType((*ENIMultiIPRequest)(nil), "rpc.ENIMultiIPRequest")
	proto.RegisterType((*ENIMultiIPReply)(nil), "rpc.ENIMultiIPReply")
	proto.RegisterType((*CrossVPCENIRequest)(nil), "rpc.CrossVPCENIRequest")
	proto.RegisterType((*CrossVPCENIReply)(nil), "rpc.CrossVPCENIReply")
}

func init() { proto.RegisterFile("pkg/rpc/rpc.proto", fileDescriptor_bd1e66095a603e73) }

var fileDescriptor_bd1e66095a603e73 = []byte{
	// 663 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x96, 0xc1, 0x6a, 0xdb, 0x4c,
	0x10, 0xc7, 0x23, 0x29, 0xb1, 0xad, 0xf1, 0xf7, 0x39, 0xd6, 0xc4, 0x71, 0x85, 0x09, 0xc5, 0xb8,
	0x17, 0x53, 0x4a, 0x0a, 0x09, 0x84, 0x84, 0xf6, 0x52, 0xcb, 0x6e, 0xba, 0x84, 0x08, 0xa1, 0x94,
	0x40, 0x8f, 0x8a, 0xb2, 0x49, 0x8d, 0x15, 0x49, 0xd5, 0xca, 0xb8, 0x7a, 0x8a, 0xf6, 0x79, 0xfa,
	0x44, 0x85, 0xd2, 0x3e, 0x43, 0xd1, 0x6a, 0x63, 0xc9, 0x12, 0xe9, 0xa1, 0xbd, 0x14, 0xd3, 0x83,
	0x61, 0xe7, 0x3f, 0x33, 0x66, 0xff, 0xb3, 0x3f, 0xad, 0x04, 0x5a, 0x38, 0xbb, 0x7d, 0x1e, 0x85,
	0x6e, 0xfa, 0xdb, 0x0f, 0xa3, 0x20, 0x0e, 0x50, 0x89, 0x42, 0x77, 0xf0, 0x59, 0x01, 0xed, 0x95,
	0xe7, 0x05, 0xae, 0x13, 0x53, 0x62, 0xd9, 0xf4, 0xc3, 0x9c, 0xb2, 0x18, 0x1f, 0x03, 0x9c, 0x1d,
	0x33, 0x2b, 0xb8, 0x36, 0x9d, 0x3b, 0xaa, 0x4b, 0x7d, 0x69, 0xa8, 0xda, 0x05, 0x05, 0x87, 0xb0,
	0x9d, 0x47, 0x2c, 0x74, 0x5c, 0xaa, 0xcb, 0xbc, 0xa8, 0x2c, 0xe3, 0x11, 0x74, 0x33, 0x89, 0xf8,
	0x37, 0x91, 0x63, 0x04, 0x7e, 0xec, 0x4c, 0x7d, 0x1a, 0x91, 0xb1, 0xae, 0xf0, 0x86, 0x07, 0xb2,
	0xd8, 0x81, 0x2d, 0x93, 0xc6, 0x3e, 0xd3, 0x37, 0x79, 0x59, 0x16, 0x60, 0x17, 0x6a, 0xe4, 0x86,
	0xef, 0x69, 0x8b, 0xcb, 0x22, 0xc2, 0x3e, 0x34, 0xcf, 0x8e, 0x99, 0x19, 0x5c, 0x53, 0x9e, 0xac,
	0xf1, 0x64, 0x51, 0xc2, 0x27, 0x50, 0x23, 0xd6, 0xdb, 0x24, 0xa4, 0x7a, 0xbd, 0x2f, 0x0d, 0x5b,
	0x07, 0xcd, 0xfd, 0x74, 0x10, 0x99, 0x64, 0x8b, 0x14, 0x1e, 0x03, 0x4c, 0x4c, 0x72, 0x3e, 0xf7,
	0xe2, 0x29, 0xb1, 0xf4, 0x46, 0x5f, 0x1a, 0x36, 0x0f, 0xba, 0xbc, 0x30, 0x97, 0xc5, 0x88, 0xde,
	0x6c, 0xd8, 0x85, 0x5a, 0x7c, 0x01, 0x4d, 0x23, 0x0a, 0x18, 0xbb, 0xb4, 0x8c, 0x89, 0x49, 0x74,
	0x95, 0xb7, 0x3e, 0xe2, 0xad, 0x05, 0x3d, 0xef, 0x2d, 0x56, 0x8f, 0xfe, 0x87, 0xa6, 0x49, 0xe3,
	0x45, 0x10, 0xcd, 0x88, 0x7f, 0x13, 0x0c, 0x7e, 0x48, 0xb0, 0x5d, 0x3c, 0x92, 0xd0, 0x4b, 0x70,
	0x0f, 0x54, 0xc2, 0x2e, 0xe6, 0xae, 0x4b, 0x19, 0xe3, 0xe7, 0xd1, 0xb0, 0x73, 0x21, 0x1d, 0xcb,
	0x24, 0x8a, 0xce, 0xd9, 0xad, 0x38, 0x05, 0x11, 0x15, 0x4c, 0x2b, 0x0f, 0x9b, 0x3e, 0x5a, 0x31,
	0xbd, 0xc9, 0x77, 0xde, 0xa9, 0x98, 0x0e, 0xbd, 0xa4, 0x64, 0xf9, 0x64, 0xd5, 0xf2, 0x16, 0x6f,
	0xdc, 0xad, 0x5a, 0xce, 0x3a, 0x7f, 0x65, 0xf8, 0x93, 0x02, 0x6d, 0x9b, 0x7a, 0xd4, 0x61, 0xff,
	0x10, 0xfc, 0x3b, 0x10, 0xfc, 0x2e, 0x41, 0xab, 0x70, 0x22, 0x6b, 0x4f, 0xe0, 0x57, 0x19, 0x5a,
	0xc6, 0x7b, 0xea, 0xce, 0xd6, 0x99, 0xbf, 0x55, 0xb4, 0xea, 0xbf, 0x8f, 0x56, 0xe3, 0x4f, 0xd0,
	0xfa, 0x26, 0xc1, 0x7f, 0xcb, 0x51, 0xaf, 0x3d, 0x58, 0x3b, 0xa0, 0x55, 0x86, 0x9b, 0x3e, 0x5d,
	0xdb, 0xa5, 0x0d, 0x60, 0x0b, 0x64, 0x62, 0x09, 0xcc, 0x64, 0x62, 0x21, 0xc2, 0x26, 0x77, 0x97,
	0xb9, 0xe6, 0x6b, 0x6c, 0x83, 0x72, 0xee, 0xb8, 0x82, 0x9a, 0x74, 0x99, 0x76, 0x9d, 0x2e, 0x04,
	0x1f, 0xf2, 0xe9, 0x22, 0x45, 0x66, 0x62, 0x12, 0x32, 0x16, 0x6c, 0x64, 0x41, 0xfa, 0x5f, 0x29,
	0x04, 0x82, 0x09, 0xbe, 0xc6, 0x1e, 0x34, 0x2e, 0xe6, 0x57, 0x3e, 0x8d, 0xc9, 0x98, 0xa3, 0xa0,
	0xda, 0xcb, 0x38, 0x45, 0x69, 0xe2, 0x3b, 0x57, 0x1e, 0x7d, 0x3d, 0xfd, 0x28, 0x2e, 0x21, 0xd5,
	0x2e, 0x4a, 0xf8, 0x0c, 0x34, 0xbe, 0x18, 0x53, 0x8f, 0xc6, 0xd4, 0x0a, 0xbc, 0xa9, 0x9b, 0xf0,
	0x1b, 0x47, 0xb5, 0xab, 0x89, 0x41, 0x07, 0xb0, 0x8a, 0xc9, 0xc0, 0x84, 0x76, 0x79, 0x98, 0x95,
	0x29, 0x08, 0xc7, 0x72, 0xee, 0x58, 0x87, 0xfa, 0xa5, 0x65, 0x18, 0x64, 0x6c, 0x8b, 0x39, 0xdc,
	0x87, 0x4f, 0xdf, 0xdd, 0x13, 0x81, 0x3d, 0xe8, 0x8e, 0x0c, 0x83, 0x8f, 0x37, 0x1f, 0x73, 0x9a,
	0x69, 0x6f, 0xe0, 0x1e, 0xe8, 0xa3, 0x91, 0x61, 0x45, 0xd3, 0x3b, 0x27, 0x4a, 0x4a, 0x59, 0x09,
	0x77, 0x41, 0x2b, 0xec, 0x49, 0xc8, 0xf2, 0xc1, 0x17, 0x09, 0xc0, 0x30, 0xc9, 0xc8, 0x71, 0x67,
	0xd4, 0xbf, 0xc6, 0x97, 0x00, 0xf9, 0xfb, 0x19, 0xb3, 0x47, 0xa8, 0xf2, 0x0d, 0xd5, 0xeb, 0x54,
	0xf4, 0xd0, 0x4b, 0x06, 0x1b, 0x78, 0x02, 0xea, 0xf2, 0x6a, 0xc5, 0x0c, 0xaa, 0xf2, 0xcb, 0xaf,
	0xb7, 0x53, 0x96, 0xb3, 0xd6, 0x43, 0xa8, 0x8b, 0x47, 0x07, 0xb3, 0x8a, 0xd5, 0x3b, 0xab, 0xa7,
	0xad, 0x8a, 0xbc, 0xe9, 0xaa, 0xc6, 0xbf, 0xf6, 0x0e, 0x7f, 0x06, 0x00, 0x00, 0xff, 0xff, 0x31,
	0xba, 0xbe, 0x77, 0x02, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CNIBackendClient is the client API for CNIBackend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CNIBackendClient interface {
	AllocateIP(ctx context.Context, in *AllocateIPRequest, opts ...grpc.CallOption) (*AllocateIPReply, error)
	ReleaseIP(ctx context.Context, in *ReleaseIPRequest, opts ...grpc.CallOption) (*ReleaseIPReply, error)
	CheckIP(ctx context.Context, in *CheckIPRequest, opts ...grpc.CallOption) (*CheckIPReply, error)
}

type cNIBackendClient struct {
	cc *grpc.ClientConn
}

func NewCNIBackendClient(cc *grpc.ClientConn) CNIBackendClient {
	return &cNIBackendClient{cc}
}

func (c *cNIBackendClient) AllocateIP(ctx context.Context, in *AllocateIPRequest, opts ...grpc.CallOption) (*AllocateIPReply, error) {
	out := new(AllocateIPReply)
	err := c.cc.Invoke(ctx, "/rpc.CNIBackend/AllocateIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNIBackendClient) ReleaseIP(ctx context.Context, in *ReleaseIPRequest, opts ...grpc.CallOption) (*ReleaseIPReply, error) {
	out := new(ReleaseIPReply)
	err := c.cc.Invoke(ctx, "/rpc.CNIBackend/ReleaseIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNIBackendClient) CheckIP(ctx context.Context, in *CheckIPRequest, opts ...grpc.CallOption) (*CheckIPReply, error) {
	out := new(CheckIPReply)
	err := c.cc.Invoke(ctx, "/rpc.CNIBackend/CheckIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CNIBackendServer is the server API for CNIBackend service.
type CNIBackendServer interface {
	AllocateIP(context.Context, *AllocateIPRequest) (*AllocateIPReply, error)
	ReleaseIP(context.Context, *ReleaseIPRequest) (*ReleaseIPReply, error)
	CheckIP(context.Context, *CheckIPRequest) (*CheckIPReply, error)
}

// UnimplementedCNIBackendServer can be embedded to have forward compatible implementations.
type UnimplementedCNIBackendServer struct {
}

func (*UnimplementedCNIBackendServer) AllocateIP(ctx context.Context, req *AllocateIPRequest) (*AllocateIPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateIP not implemented")
}
func (*UnimplementedCNIBackendServer) ReleaseIP(ctx context.Context, req *ReleaseIPRequest) (*ReleaseIPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseIP not implemented")
}
func (*UnimplementedCNIBackendServer) CheckIP(ctx context.Context, req *CheckIPRequest) (*CheckIPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIP not implemented")
}

func RegisterCNIBackendServer(s *grpc.Server, srv CNIBackendServer) {
	s.RegisterService(&_CNIBackend_serviceDesc, srv)
}

func _CNIBackend_AllocateIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIBackendServer).AllocateIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CNIBackend/AllocateIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIBackendServer).AllocateIP(ctx, req.(*AllocateIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNIBackend_ReleaseIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIBackendServer).ReleaseIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CNIBackend/ReleaseIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIBackendServer).ReleaseIP(ctx, req.(*ReleaseIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNIBackend_CheckIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIBackendServer).CheckIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CNIBackend/CheckIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIBackendServer).CheckIP(ctx, req.(*CheckIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CNIBackend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.CNIBackend",
	HandlerType: (*CNIBackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllocateIP",
			Handler:    _CNIBackend_AllocateIP_Handler,
		},
		{
			MethodName: "ReleaseIP",
			Handler:    _CNIBackend_ReleaseIP_Handler,
		},
		{
			MethodName: "CheckIP",
			Handler:    _CNIBackend_CheckIP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/rpc/rpc.proto",
}
