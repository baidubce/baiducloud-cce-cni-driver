// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/baidubce/baiducloud-cce-cni-driver/pkg/rpc (interfaces: CNIBackendClient)

// Package testing is a generated GoMock package.
package testing

import (
	context "context"
	reflect "reflect"

	rpc "github.com/baidubce/baiducloud-cce-cni-driver/pkg/rpc"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockCNIBackendClient is a mock of CNIBackendClient interface.
type MockCNIBackendClient struct {
	ctrl     *gomock.Controller
	recorder *MockCNIBackendClientMockRecorder
}

// MockCNIBackendClientMockRecorder is the mock recorder for MockCNIBackendClient.
type MockCNIBackendClientMockRecorder struct {
	mock *MockCNIBackendClient
}

// NewMockCNIBackendClient creates a new mock instance.
func NewMockCNIBackendClient(ctrl *gomock.Controller) *MockCNIBackendClient {
	mock := &MockCNIBackendClient{ctrl: ctrl}
	mock.recorder = &MockCNIBackendClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCNIBackendClient) EXPECT() *MockCNIBackendClientMockRecorder {
	return m.recorder
}

// AllocateIP mocks base method.
func (m *MockCNIBackendClient) AllocateIP(arg0 context.Context, arg1 *rpc.AllocateIPRequest, arg2 ...grpc.CallOption) (*rpc.AllocateIPReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AllocateIP", varargs...)
	ret0, _ := ret[0].(*rpc.AllocateIPReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateIP indicates an expected call of AllocateIP.
func (mr *MockCNIBackendClientMockRecorder) AllocateIP(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateIP", reflect.TypeOf((*MockCNIBackendClient)(nil).AllocateIP), varargs...)
}

// CheckIP mocks base method.
func (m *MockCNIBackendClient) CheckIP(arg0 context.Context, arg1 *rpc.CheckIPRequest, arg2 ...grpc.CallOption) (*rpc.CheckIPReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckIP", varargs...)
	ret0, _ := ret[0].(*rpc.CheckIPReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIP indicates an expected call of CheckIP.
func (mr *MockCNIBackendClientMockRecorder) CheckIP(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIP", reflect.TypeOf((*MockCNIBackendClient)(nil).CheckIP), varargs...)
}

// ReleaseIP mocks base method.
func (m *MockCNIBackendClient) ReleaseIP(arg0 context.Context, arg1 *rpc.ReleaseIPRequest, arg2 ...grpc.CallOption) (*rpc.ReleaseIPReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReleaseIP", varargs...)
	ret0, _ := ret[0].(*rpc.ReleaseIPReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseIP indicates an expected call of ReleaseIP.
func (mr *MockCNIBackendClientMockRecorder) ReleaseIP(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseIP", reflect.TypeOf((*MockCNIBackendClient)(nil).ReleaseIP), varargs...)
}
