// Code generated by go-swagger; DO NOT EDIT.

// /*
//  * Copyright (c) 2023 Baidu, Inc. All Rights Reserved.
//  *
//  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
//  * except in compliance with the License. You may obtain a copy of the License at
//  *
//  * http://www.apache.org/licenses/LICENSE-2.0
//  *
//  * Unless required by applicable law or agreed to in writing, software distributed under the
//  * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
//  * either express or implied. See the License for the specific language governing permissions
//  * and limitations under the License.
//  *
//  */

package eni

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/baidubce/baiducloud-cce-cni-driver/cce-network-v2/api/v1/models"
)

// PostEniReader is a Reader for the PostEni structure.
type PostEniReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostEniReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostEniOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostEniInvalid()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPostEniExists()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostEniFailure()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 501:
		result := NewPostEniDisabled()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostEniOK creates a PostEniOK with default headers values
func NewPostEniOK() *PostEniOK {
	return &PostEniOK{}
}

/*
PostEniOK handles this case with default header values.

Success
*/
type PostEniOK struct {
	Payload *models.IPAMResponse
}

func (o *PostEniOK) Error() string {
	return fmt.Sprintf("[POST /eni][%d] postEniOK  %+v", 200, o.Payload)
}

func (o *PostEniOK) GetPayload() *models.IPAMResponse {
	return o.Payload
}

func (o *PostEniOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IPAMResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEniInvalid creates a PostEniInvalid with default headers values
func NewPostEniInvalid() *PostEniInvalid {
	return &PostEniInvalid{}
}

/*
PostEniInvalid handles this case with default header values.

Invalid IP address
*/
type PostEniInvalid struct {
}

func (o *PostEniInvalid) Error() string {
	return fmt.Sprintf("[POST /eni][%d] postEniInvalid ", 400)
}

func (o *PostEniInvalid) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostEniExists creates a PostEniExists with default headers values
func NewPostEniExists() *PostEniExists {
	return &PostEniExists{}
}

/*
PostEniExists handles this case with default header values.

IP already allocated
*/
type PostEniExists struct {
}

func (o *PostEniExists) Error() string {
	return fmt.Sprintf("[POST /eni][%d] postEniExists ", 409)
}

func (o *PostEniExists) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostEniFailure creates a PostEniFailure with default headers values
func NewPostEniFailure() *PostEniFailure {
	return &PostEniFailure{}
}

/*
PostEniFailure handles this case with default header values.

IP allocation failure. Details in message.
*/
type PostEniFailure struct {
	Payload models.Error
}

func (o *PostEniFailure) Error() string {
	return fmt.Sprintf("[POST /eni][%d] postEniFailure  %+v", 500, o.Payload)
}

func (o *PostEniFailure) GetPayload() models.Error {
	return o.Payload
}

func (o *PostEniFailure) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEniDisabled creates a PostEniDisabled with default headers values
func NewPostEniDisabled() *PostEniDisabled {
	return &PostEniDisabled{}
}

/*
PostEniDisabled handles this case with default header values.

Allocation for address family disabled
*/
type PostEniDisabled struct {
}

func (o *PostEniDisabled) Error() string {
	return fmt.Sprintf("[POST /eni][%d] postEniDisabled ", 501)
}

func (o *PostEniDisabled) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
