//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
 * Copyright (c) 2023 Baidu, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 *
 */

// Code generated by deepequal-gen. DO NOT EDIT.

package api

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *ENISpec) DeepEqual(other *ENISpec) bool {
	if other == nil {
		return false
	}

	if in.UseMode != other.UseMode {
		return false
	}
	if in.MaxAllocateENI != other.MaxAllocateENI {
		return false
	}
	if in.PreAllocateENI != other.PreAllocateENI {
		return false
	}
	if in.BurstableMehrfachENI != other.BurstableMehrfachENI {
		return false
	}
	if in.MaxIPsPerENI != other.MaxIPsPerENI {
		return false
	}
	if in.InstanceType != other.InstanceType {
		return false
	}
	if (in.FirstInterfaceIndex == nil) != (other.FirstInterfaceIndex == nil) {
		return false
	} else if in.FirstInterfaceIndex != nil {
		if *in.FirstInterfaceIndex != *other.FirstInterfaceIndex {
			return false
		}
	}

	if in.VpcID != other.VpcID {
		return false
	}
	if ((in.SecurityGroups != nil) && (other.SecurityGroups != nil)) || ((in.SecurityGroups == nil) != (other.SecurityGroups == nil)) {
		in, other := &in.SecurityGroups, &other.SecurityGroups
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for i, inElement := range *in {
				if inElement != (*other)[i] {
					return false
				}
			}
		}
	}

	if ((in.EnterpriseSecurityGroupList != nil) && (other.EnterpriseSecurityGroupList != nil)) || ((in.EnterpriseSecurityGroupList == nil) != (other.EnterpriseSecurityGroupList == nil)) {
		in, other := &in.EnterpriseSecurityGroupList, &other.EnterpriseSecurityGroupList
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for i, inElement := range *in {
				if inElement != (*other)[i] {
					return false
				}
			}
		}
	}

	if ((in.SubnetIDs != nil) && (other.SubnetIDs != nil)) || ((in.SubnetIDs == nil) != (other.SubnetIDs == nil)) {
		in, other := &in.SubnetIDs, &other.SubnetIDs
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for i, inElement := range *in {
				if inElement != (*other)[i] {
					return false
				}
			}
		}
	}

	if in.AvailabilityZone != other.AvailabilityZone {
		return false
	}
	if (in.DeleteOnTermination == nil) != (other.DeleteOnTermination == nil) {
		return false
	} else if in.DeleteOnTermination != nil {
		if *in.DeleteOnTermination != *other.DeleteOnTermination {
			return false
		}
	}

	if (in.UsePrimaryAddress == nil) != (other.UsePrimaryAddress == nil) {
		return false
	} else if in.UsePrimaryAddress != nil {
		if *in.UsePrimaryAddress != *other.UsePrimaryAddress {
			return false
		}
	}

	if in.RouteTableOffset != other.RouteTableOffset {
		return false
	}
	if in.InstallSourceBasedRouting != other.InstallSourceBasedRouting {
		return false
	}

	return true
}
