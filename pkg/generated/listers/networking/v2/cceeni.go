// Code generated by lister-gen. DO NOT EDIT.

package v2

import (
	v2 "github.com/baidubce/baiducloud-cce-cni-driver/pkg/apis/networking/v2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CceENILister helps list CceENIs.
type CceENILister interface {
	// List lists all CceENIs in the indexer.
	List(selector labels.Selector) (ret []*v2.CceENI, err error)
	// CceENIs returns an object that can list and get CceENIs.
	CceENIs(namespace string) CceENINamespaceLister
	CceENIListerExpansion
}

// cceENILister implements the CceENILister interface.
type cceENILister struct {
	indexer cache.Indexer
}

// NewCceENILister returns a new CceENILister.
func NewCceENILister(indexer cache.Indexer) CceENILister {
	return &cceENILister{indexer: indexer}
}

// List lists all CceENIs in the indexer.
func (s *cceENILister) List(selector labels.Selector) (ret []*v2.CceENI, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v2.CceENI))
	})
	return ret, err
}

// CceENIs returns an object that can list and get CceENIs.
func (s *cceENILister) CceENIs(namespace string) CceENINamespaceLister {
	return cceENINamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CceENINamespaceLister helps list and get CceENIs.
type CceENINamespaceLister interface {
	// List lists all CceENIs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v2.CceENI, err error)
	// Get retrieves the CceENI from the indexer for a given namespace and name.
	Get(name string) (*v2.CceENI, error)
	CceENINamespaceListerExpansion
}

// cceENINamespaceLister implements the CceENINamespaceLister
// interface.
type cceENINamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CceENIs in the indexer for a given namespace.
func (s cceENINamespaceLister) List(selector labels.Selector) (ret []*v2.CceENI, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v2.CceENI))
	})
	return ret, err
}

// Get retrieves the CceENI from the indexer for a given namespace and name.
func (s cceENINamespaceLister) Get(name string) (*v2.CceENI, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v2.Resource("cceeni"), name)
	}
	return obj.(*v2.CceENI), nil
}
