// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/baidubce/baiducloud-cce-cni-driver/pkg/eniipam/ipam (interfaces: Interface)

// Package testing is a generated GoMock package.
package testing

import (
	context "context"
	v1alpha1 "github.com/baidubce/baiducloud-cce-cni-driver/pkg/apis/networking/v1alpha1"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockInterface is a mock of Interface interface
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Allocate mocks base method
func (m *MockInterface) Allocate(arg0 context.Context, arg1, arg2, arg3 string) (*v1alpha1.WorkloadEndpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allocate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*v1alpha1.WorkloadEndpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Allocate indicates an expected call of Allocate
func (mr *MockInterfaceMockRecorder) Allocate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allocate", reflect.TypeOf((*MockInterface)(nil).Allocate), arg0, arg1, arg2, arg3)
}

// Ready mocks base method
func (m *MockInterface) Ready(arg0 context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ready", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Ready indicates an expected call of Ready
func (mr *MockInterfaceMockRecorder) Ready(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ready", reflect.TypeOf((*MockInterface)(nil).Ready), arg0)
}

// Release mocks base method
func (m *MockInterface) Release(arg0 context.Context, arg1, arg2, arg3 string) (*v1alpha1.WorkloadEndpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*v1alpha1.WorkloadEndpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Release indicates an expected call of Release
func (mr *MockInterfaceMockRecorder) Release(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockInterface)(nil).Release), arg0, arg1, arg2, arg3)
}

// Run mocks base method
func (m *MockInterface) Run(arg0 context.Context, arg1 <-chan struct{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockInterfaceMockRecorder) Run(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockInterface)(nil).Run), arg0, arg1)
}
