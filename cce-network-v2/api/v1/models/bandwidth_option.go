// Code generated by go-swagger; DO NOT EDIT.

// /*
//  * Copyright (c) 2023 Baidu, Inc. All Rights Reserved.
//  *
//  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
//  * except in compliance with the License. You may obtain a copy of the License at
//  *
//  * http://www.apache.org/licenses/LICENSE-2.0
//  *
//  * Unless required by applicable law or agreed to in writing, software distributed under the
//  * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
//  * either express or implied. See the License for the specific language governing permissions
//  * and limitations under the License.
//  *
//  */

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BandwidthOption BandwidthOption is the bandwidth option of network
// +k8s:deepcopy-gen=true
//
// swagger:model BandwidthOption
type BandwidthOption struct {

	// egress
	Egress int64 `json:"egress,omitempty"`

	// ingress
	Ingress int64 `json:"ingress,omitempty"`

	// mode
	// Enum: [edt tc ]
	Mode string `json:"mode,omitempty"`
}

// Validate validates this bandwidth option
func (m *BandwidthOption) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var bandwidthOptionTypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["edt","tc",""]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bandwidthOptionTypeModePropEnum = append(bandwidthOptionTypeModePropEnum, v)
	}
}

const (

	// BandwidthOptionModeEdt captures enum value "edt"
	BandwidthOptionModeEdt string = "edt"

	// BandwidthOptionModeTc captures enum value "tc"
	BandwidthOptionModeTc string = "tc"

	// BandwidthOptionModeEmpty captures enum value ""
	BandwidthOptionModeEmpty string = ""
)

// prop value enum
func (m *BandwidthOption) validateModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, bandwidthOptionTypeModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BandwidthOption) validateMode(formats strfmt.Registry) error {

	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	// value enum
	if err := m.validateModeEnum("mode", "body", m.Mode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BandwidthOption) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BandwidthOption) UnmarshalBinary(b []byte) error {
	var res BandwidthOption
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
