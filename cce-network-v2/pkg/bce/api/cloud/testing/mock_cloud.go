// /*
//  * Copyright (c) 2023 Baidu, Inc. All Rights Reserved.
//  *
//  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
//  * except in compliance with the License. You may obtain a copy of the License at
//  *
//  * http://www.apache.org/licenses/LICENSE-2.0
//  *
//  * Unless required by applicable law or agreed to in writing, software distributed under the
//  * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
//  * either express or implied. See the License for the specific language governing permissions
//  * and limitations under the License.
//  *
//  */
//
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/baidubce/baiducloud-cce-cni-driver/cce-network-v2/pkg/bce/api/cloud (interfaces: Interface)

// Package testing is a generated GoMock package.
package testing

import (
	context "context"
	reflect "reflect"

	hpc "github.com/baidubce/baiducloud-cce-cni-driver/cce-network-v2/pkg/bce/api/hpc"
	bbc "github.com/baidubce/bce-sdk-go/services/bbc"
	api "github.com/baidubce/bce-sdk-go/services/bcc/api"
	eip "github.com/baidubce/bce-sdk-go/services/eip"
	eni "github.com/baidubce/bce-sdk-go/services/eni"
	esg "github.com/baidubce/bce-sdk-go/services/esg"
	vpc "github.com/baidubce/bce-sdk-go/services/vpc"
	gomock "github.com/golang/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// AddPrivateIP mocks base method.
func (m *MockInterface) AddPrivateIP(ctx context.Context, privateIP, eniID string, isIpv6 bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPrivateIP", ctx, privateIP, eniID, isIpv6)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPrivateIP indicates an expected call of AddPrivateIP.
func (mr *MockInterfaceMockRecorder) AddPrivateIP(ctx, privateIP, eniID, isIpv6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPrivateIP", reflect.TypeOf((*MockInterface)(nil).AddPrivateIP), ctx, privateIP, eniID, isIpv6)
}

// AttachENI mocks base method.
func (m *MockInterface) AttachENI(ctx context.Context, args *eni.EniInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachENI", ctx, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// AttachENI indicates an expected call of AttachENI.
func (mr *MockInterfaceMockRecorder) AttachENI(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachENI", reflect.TypeOf((*MockInterface)(nil).AttachENI), ctx, args)
}

// BBCBatchAddIP mocks base method.
func (m *MockInterface) BBCBatchAddIP(ctx context.Context, args *bbc.BatchAddIpArgs) (*bbc.BatchAddIpResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BBCBatchAddIP", ctx, args)
	ret0, _ := ret[0].(*bbc.BatchAddIpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BBCBatchAddIP indicates an expected call of BBCBatchAddIP.
func (mr *MockInterfaceMockRecorder) BBCBatchAddIP(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BBCBatchAddIP", reflect.TypeOf((*MockInterface)(nil).BBCBatchAddIP), ctx, args)
}

// BBCBatchAddIPCrossSubnet mocks base method.
func (m *MockInterface) BBCBatchAddIPCrossSubnet(ctx context.Context, args *bbc.BatchAddIpCrossSubnetArgs) (*bbc.BatchAddIpResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BBCBatchAddIPCrossSubnet", ctx, args)
	ret0, _ := ret[0].(*bbc.BatchAddIpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BBCBatchAddIPCrossSubnet indicates an expected call of BBCBatchAddIPCrossSubnet.
func (mr *MockInterfaceMockRecorder) BBCBatchAddIPCrossSubnet(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BBCBatchAddIPCrossSubnet", reflect.TypeOf((*MockInterface)(nil).BBCBatchAddIPCrossSubnet), ctx, args)
}

// BBCBatchDelIP mocks base method.
func (m *MockInterface) BBCBatchDelIP(ctx context.Context, args *bbc.BatchDelIpArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BBCBatchDelIP", ctx, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// BBCBatchDelIP indicates an expected call of BBCBatchDelIP.
func (mr *MockInterfaceMockRecorder) BBCBatchDelIP(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BBCBatchDelIP", reflect.TypeOf((*MockInterface)(nil).BBCBatchDelIP), ctx, args)
}

// BCCBatchAddIP mocks base method.
func (m *MockInterface) BCCBatchAddIP(ctx context.Context, args *api.BatchAddIpArgs) (*api.BatchAddIpResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BCCBatchAddIP", ctx, args)
	ret0, _ := ret[0].(*api.BatchAddIpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BCCBatchAddIP indicates an expected call of BCCBatchAddIP.
func (mr *MockInterfaceMockRecorder) BCCBatchAddIP(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BCCBatchAddIP", reflect.TypeOf((*MockInterface)(nil).BCCBatchAddIP), ctx, args)
}

// BCCBatchDelIP mocks base method.
func (m *MockInterface) BCCBatchDelIP(ctx context.Context, args *api.BatchDelIpArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BCCBatchDelIP", ctx, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// BCCBatchDelIP indicates an expected call of BCCBatchDelIP.
func (mr *MockInterfaceMockRecorder) BCCBatchDelIP(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BCCBatchDelIP", reflect.TypeOf((*MockInterface)(nil).BCCBatchDelIP), ctx, args)
}

// BatchAddHpcEniPrivateIP mocks base method.
func (m *MockInterface) BatchAddHpcEniPrivateIP(ctx context.Context, args *hpc.EniBatchPrivateIPArgs) (*hpc.BatchAddPrivateIPResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchAddHpcEniPrivateIP", ctx, args)
	ret0, _ := ret[0].(*hpc.BatchAddPrivateIPResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchAddHpcEniPrivateIP indicates an expected call of BatchAddHpcEniPrivateIP.
func (mr *MockInterfaceMockRecorder) BatchAddHpcEniPrivateIP(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchAddHpcEniPrivateIP", reflect.TypeOf((*MockInterface)(nil).BatchAddHpcEniPrivateIP), ctx, args)
}

// BatchAddPrivateIP mocks base method.
func (m *MockInterface) BatchAddPrivateIP(ctx context.Context, privateIPs []string, count int, eniID string, isIpv6 bool) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchAddPrivateIP", ctx, privateIPs, count, eniID, isIpv6)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchAddPrivateIP indicates an expected call of BatchAddPrivateIP.
func (mr *MockInterfaceMockRecorder) BatchAddPrivateIP(ctx, privateIPs, count, eniID, isIpv6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchAddPrivateIP", reflect.TypeOf((*MockInterface)(nil).BatchAddPrivateIP), ctx, privateIPs, count, eniID, isIpv6)
}

// BatchAddPrivateIpCrossSubnet mocks base method.
func (m *MockInterface) BatchAddPrivateIpCrossSubnet(ctx context.Context, eniID, subnetID string, privateIPs []string, count int, isIpv6 bool) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchAddPrivateIpCrossSubnet", ctx, eniID, subnetID, privateIPs, count, isIpv6)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchAddPrivateIpCrossSubnet indicates an expected call of BatchAddPrivateIpCrossSubnet.
func (mr *MockInterfaceMockRecorder) BatchAddPrivateIpCrossSubnet(ctx, eniID, subnetID, privateIPs, count, isIpv6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchAddPrivateIpCrossSubnet", reflect.TypeOf((*MockInterface)(nil).BatchAddPrivateIpCrossSubnet), ctx, eniID, subnetID, privateIPs, count, isIpv6)
}

// BatchDeleteHpcEniPrivateIP mocks base method.
func (m *MockInterface) BatchDeleteHpcEniPrivateIP(ctx context.Context, args *hpc.EniBatchDeleteIPArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteHpcEniPrivateIP", ctx, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchDeleteHpcEniPrivateIP indicates an expected call of BatchDeleteHpcEniPrivateIP.
func (mr *MockInterfaceMockRecorder) BatchDeleteHpcEniPrivateIP(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteHpcEniPrivateIP", reflect.TypeOf((*MockInterface)(nil).BatchDeleteHpcEniPrivateIP), ctx, args)
}

// BatchDeletePrivateIP mocks base method.
func (m *MockInterface) BatchDeletePrivateIP(ctx context.Context, privateIPs []string, eniID string, isIpv6 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeletePrivateIP", ctx, privateIPs, eniID, isIpv6)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchDeletePrivateIP indicates an expected call of BatchDeletePrivateIP.
func (mr *MockInterfaceMockRecorder) BatchDeletePrivateIP(ctx, privateIPs, eniID, isIpv6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeletePrivateIP", reflect.TypeOf((*MockInterface)(nil).BatchDeletePrivateIP), ctx, privateIPs, eniID, isIpv6)
}

// BindENIPublicIP mocks base method.
func (m *MockInterface) BindENIPublicIP(ctx context.Context, privateIP, publicIP, eniID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindENIPublicIP", ctx, privateIP, publicIP, eniID)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindENIPublicIP indicates an expected call of BindENIPublicIP.
func (mr *MockInterfaceMockRecorder) BindENIPublicIP(ctx, privateIP, publicIP, eniID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindENIPublicIP", reflect.TypeOf((*MockInterface)(nil).BindENIPublicIP), ctx, privateIP, publicIP, eniID)
}

// CreateENI mocks base method.
func (m *MockInterface) CreateENI(ctx context.Context, args *eni.CreateEniArgs) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateENI", ctx, args)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateENI indicates an expected call of CreateENI.
func (mr *MockInterfaceMockRecorder) CreateENI(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateENI", reflect.TypeOf((*MockInterface)(nil).CreateENI), ctx, args)
}

// CreateRouteRule mocks base method.
func (m *MockInterface) CreateRouteRule(ctx context.Context, args *vpc.CreateRouteRuleArgs) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRouteRule", ctx, args)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRouteRule indicates an expected call of CreateRouteRule.
func (mr *MockInterfaceMockRecorder) CreateRouteRule(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRouteRule", reflect.TypeOf((*MockInterface)(nil).CreateRouteRule), ctx, args)
}

// DeleteENI mocks base method.
func (m *MockInterface) DeleteENI(ctx context.Context, eniID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteENI", ctx, eniID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteENI indicates an expected call of DeleteENI.
func (mr *MockInterfaceMockRecorder) DeleteENI(ctx, eniID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteENI", reflect.TypeOf((*MockInterface)(nil).DeleteENI), ctx, eniID)
}

// DeletePrivateIP mocks base method.
func (m *MockInterface) DeletePrivateIP(ctx context.Context, privateIP, eniID string, isIpv6 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePrivateIP", ctx, privateIP, eniID, isIpv6)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePrivateIP indicates an expected call of DeletePrivateIP.
func (mr *MockInterfaceMockRecorder) DeletePrivateIP(ctx, privateIP, eniID, isIpv6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePrivateIP", reflect.TypeOf((*MockInterface)(nil).DeletePrivateIP), ctx, privateIP, eniID, isIpv6)
}

// DeleteRouteRule mocks base method.
func (m *MockInterface) DeleteRouteRule(ctx context.Context, routeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouteRule", ctx, routeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRouteRule indicates an expected call of DeleteRouteRule.
func (mr *MockInterfaceMockRecorder) DeleteRouteRule(ctx, routeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteRule", reflect.TypeOf((*MockInterface)(nil).DeleteRouteRule), ctx, routeID)
}

// DescribeSubnet mocks base method.
func (m *MockInterface) DescribeSubnet(ctx context.Context, subnetID string) (*vpc.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSubnet", ctx, subnetID)
	ret0, _ := ret[0].(*vpc.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSubnet indicates an expected call of DescribeSubnet.
func (mr *MockInterfaceMockRecorder) DescribeSubnet(ctx, subnetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSubnet", reflect.TypeOf((*MockInterface)(nil).DescribeSubnet), ctx, subnetID)
}

// DescribeVPC mocks base method.
func (m *MockInterface) DescribeVPC(ctx context.Context, vpcID string) (*vpc.ShowVPCModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeVPC", ctx, vpcID)
	ret0, _ := ret[0].(*vpc.ShowVPCModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVPC indicates an expected call of DescribeVPC.
func (mr *MockInterfaceMockRecorder) DescribeVPC(ctx, vpcID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVPC", reflect.TypeOf((*MockInterface)(nil).DescribeVPC), ctx, vpcID)
}

// DetachENI mocks base method.
func (m *MockInterface) DetachENI(ctx context.Context, args *eni.EniInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachENI", ctx, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetachENI indicates an expected call of DetachENI.
func (mr *MockInterfaceMockRecorder) DetachENI(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachENI", reflect.TypeOf((*MockInterface)(nil).DetachENI), ctx, args)
}

// DirectEIP mocks base method.
func (m *MockInterface) DirectEIP(ctx context.Context, eip string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DirectEIP", ctx, eip)
	ret0, _ := ret[0].(error)
	return ret0
}

// DirectEIP indicates an expected call of DirectEIP.
func (mr *MockInterfaceMockRecorder) DirectEIP(ctx, eip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DirectEIP", reflect.TypeOf((*MockInterface)(nil).DirectEIP), ctx, eip)
}

// GetBBCInstanceDetail mocks base method.
func (m *MockInterface) GetBBCInstanceDetail(ctx context.Context, instanceID string) (*bbc.InstanceModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBBCInstanceDetail", ctx, instanceID)
	ret0, _ := ret[0].(*bbc.InstanceModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBBCInstanceDetail indicates an expected call of GetBBCInstanceDetail.
func (mr *MockInterfaceMockRecorder) GetBBCInstanceDetail(ctx, instanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBBCInstanceDetail", reflect.TypeOf((*MockInterface)(nil).GetBBCInstanceDetail), ctx, instanceID)
}

// GetBBCInstanceENI mocks base method.
func (m *MockInterface) GetBBCInstanceENI(ctx context.Context, instanceID string) (*bbc.GetInstanceEniResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBBCInstanceENI", ctx, instanceID)
	ret0, _ := ret[0].(*bbc.GetInstanceEniResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBBCInstanceENI indicates an expected call of GetBBCInstanceENI.
func (mr *MockInterfaceMockRecorder) GetBBCInstanceENI(ctx, instanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBBCInstanceENI", reflect.TypeOf((*MockInterface)(nil).GetBBCInstanceENI), ctx, instanceID)
}

// GetBCCInstanceDetail mocks base method.
func (m *MockInterface) GetBCCInstanceDetail(ctx context.Context, instanceID string) (*api.InstanceModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBCCInstanceDetail", ctx, instanceID)
	ret0, _ := ret[0].(*api.InstanceModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBCCInstanceDetail indicates an expected call of GetBCCInstanceDetail.
func (mr *MockInterfaceMockRecorder) GetBCCInstanceDetail(ctx, instanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBCCInstanceDetail", reflect.TypeOf((*MockInterface)(nil).GetBCCInstanceDetail), ctx, instanceID)
}

// GetENIQuota mocks base method.
func (m *MockInterface) GetENIQuota(ctx context.Context, instanceID string) (*eni.EniQuoteInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetENIQuota", ctx, instanceID)
	ret0, _ := ret[0].(*eni.EniQuoteInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetENIQuota indicates an expected call of GetENIQuota.
func (mr *MockInterfaceMockRecorder) GetENIQuota(ctx, instanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetENIQuota", reflect.TypeOf((*MockInterface)(nil).GetENIQuota), ctx, instanceID)
}

// GetHPCEniID mocks base method.
func (m *MockInterface) GetHPCEniID(ctx context.Context, instanceID string) (*hpc.EniList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHPCEniID", ctx, instanceID)
	ret0, _ := ret[0].(*hpc.EniList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHPCEniID indicates an expected call of GetHPCEniID.
func (mr *MockInterfaceMockRecorder) GetHPCEniID(ctx, instanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHPCEniID", reflect.TypeOf((*MockInterface)(nil).GetHPCEniID), ctx, instanceID)
}

// HPASWrapper mocks base method.
func (m *MockInterface) HPASWrapper(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HPASWrapper", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// HPASWrapper indicates an expected call of HPASWrapper.
func (mr *MockInterfaceMockRecorder) HPASWrapper(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HPASWrapper", reflect.TypeOf((*MockInterface)(nil).HPASWrapper), ctx)
}

// ListAclEntrys mocks base method.
func (m *MockInterface) ListAclEntrys(ctx context.Context, vpcID string) ([]vpc.AclEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAclEntrys", ctx, vpcID)
	ret0, _ := ret[0].([]vpc.AclEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAclEntrys indicates an expected call of ListAclEntrys.
func (mr *MockInterfaceMockRecorder) ListAclEntrys(ctx, vpcID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAclEntrys", reflect.TypeOf((*MockInterface)(nil).ListAclEntrys), ctx, vpcID)
}

// ListBCCInstanceEni mocks base method.
func (m *MockInterface) ListBCCInstanceEni(ctx context.Context, instanceID string) ([]api.Eni, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBCCInstanceEni", ctx, instanceID)
	ret0, _ := ret[0].([]api.Eni)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBCCInstanceEni indicates an expected call of ListBCCInstanceEni.
func (mr *MockInterfaceMockRecorder) ListBCCInstanceEni(ctx, instanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBCCInstanceEni", reflect.TypeOf((*MockInterface)(nil).ListBCCInstanceEni), ctx, instanceID)
}

// ListEIPs mocks base method.
func (m *MockInterface) ListEIPs(ctx context.Context, args eip.ListEipArgs) ([]eip.EipModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEIPs", ctx, args)
	ret0, _ := ret[0].([]eip.EipModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEIPs indicates an expected call of ListEIPs.
func (mr *MockInterfaceMockRecorder) ListEIPs(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEIPs", reflect.TypeOf((*MockInterface)(nil).ListEIPs), ctx, args)
}

// ListENIs mocks base method.
func (m *MockInterface) ListENIs(ctx context.Context, args eni.ListEniArgs) ([]eni.Eni, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListENIs", ctx, args)
	ret0, _ := ret[0].([]eni.Eni)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListENIs indicates an expected call of ListENIs.
func (mr *MockInterfaceMockRecorder) ListENIs(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListENIs", reflect.TypeOf((*MockInterface)(nil).ListENIs), ctx, args)
}

// ListERIs mocks base method.
func (m *MockInterface) ListERIs(ctx context.Context, args eni.ListEniArgs) ([]eni.Eni, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListERIs", ctx, args)
	ret0, _ := ret[0].([]eni.Eni)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListERIs indicates an expected call of ListERIs.
func (mr *MockInterfaceMockRecorder) ListERIs(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListERIs", reflect.TypeOf((*MockInterface)(nil).ListERIs), ctx, args)
}

// ListEsg mocks base method.
func (m *MockInterface) ListEsg(ctx context.Context, instanceID string) ([]esg.EnterpriseSecurityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEsg", ctx, instanceID)
	ret0, _ := ret[0].([]esg.EnterpriseSecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEsg indicates an expected call of ListEsg.
func (mr *MockInterfaceMockRecorder) ListEsg(ctx, instanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEsg", reflect.TypeOf((*MockInterface)(nil).ListEsg), ctx, instanceID)
}

// ListRouteTable mocks base method.
func (m *MockInterface) ListRouteTable(ctx context.Context, vpcID, routeTableID string) ([]vpc.RouteRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRouteTable", ctx, vpcID, routeTableID)
	ret0, _ := ret[0].([]vpc.RouteRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRouteTable indicates an expected call of ListRouteTable.
func (mr *MockInterfaceMockRecorder) ListRouteTable(ctx, vpcID, routeTableID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRouteTable", reflect.TypeOf((*MockInterface)(nil).ListRouteTable), ctx, vpcID, routeTableID)
}

// ListSecurityGroup mocks base method.
func (m *MockInterface) ListSecurityGroup(ctx context.Context, vpcID, instanceID string) ([]api.SecurityGroupModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecurityGroup", ctx, vpcID, instanceID)
	ret0, _ := ret[0].([]api.SecurityGroupModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecurityGroup indicates an expected call of ListSecurityGroup.
func (mr *MockInterfaceMockRecorder) ListSecurityGroup(ctx, vpcID, instanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityGroup", reflect.TypeOf((*MockInterface)(nil).ListSecurityGroup), ctx, vpcID, instanceID)
}

// ListSubnets mocks base method.
func (m *MockInterface) ListSubnets(ctx context.Context, args *vpc.ListSubnetArgs) ([]vpc.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubnets", ctx, args)
	ret0, _ := ret[0].([]vpc.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubnets indicates an expected call of ListSubnets.
func (mr *MockInterfaceMockRecorder) ListSubnets(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubnets", reflect.TypeOf((*MockInterface)(nil).ListSubnets), ctx, args)
}

// StatENI mocks base method.
func (m *MockInterface) StatENI(ctx context.Context, eniID string) (*eni.Eni, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatENI", ctx, eniID)
	ret0, _ := ret[0].(*eni.Eni)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatENI indicates an expected call of StatENI.
func (mr *MockInterfaceMockRecorder) StatENI(ctx, eniID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatENI", reflect.TypeOf((*MockInterface)(nil).StatENI), ctx, eniID)
}

// UnBindENIPublicIP mocks base method.
func (m *MockInterface) UnBindENIPublicIP(ctx context.Context, publicIP, eniID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnBindENIPublicIP", ctx, publicIP, eniID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnBindENIPublicIP indicates an expected call of UnBindENIPublicIP.
func (mr *MockInterfaceMockRecorder) UnBindENIPublicIP(ctx, publicIP, eniID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnBindENIPublicIP", reflect.TypeOf((*MockInterface)(nil).UnBindENIPublicIP), ctx, publicIP, eniID)
}

// UnDirectEIP mocks base method.
func (m *MockInterface) UnDirectEIP(ctx context.Context, eip string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnDirectEIP", ctx, eip)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnDirectEIP indicates an expected call of UnDirectEIP.
func (mr *MockInterfaceMockRecorder) UnDirectEIP(ctx, eip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnDirectEIP", reflect.TypeOf((*MockInterface)(nil).UnDirectEIP), ctx, eip)
}
