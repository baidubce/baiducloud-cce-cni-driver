// Code generated by go-swagger; DO NOT EDIT.

// /*
//  * Copyright (c) 2023 Baidu, Inc. All Rights Reserved.
//  *
//  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
//  * except in compliance with the License. You may obtain a copy of the License at
//  *
//  * http://www.apache.org/licenses/LICENSE-2.0
//  *
//  * Unless required by applicable law or agreed to in writing, software distributed under the
//  * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
//  * either express or implied. See the License for the specific language governing permissions
//  * and limitations under the License.
//  *
//  */

package rdmaipam

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeleteRdmaipamRdmaipsParams creates a new DeleteRdmaipamRdmaipsParams object
// with the default values initialized.
func NewDeleteRdmaipamRdmaipsParams() *DeleteRdmaipamRdmaipsParams {
	var ()
	return &DeleteRdmaipamRdmaipsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteRdmaipamRdmaipsParamsWithTimeout creates a new DeleteRdmaipamRdmaipsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteRdmaipamRdmaipsParamsWithTimeout(timeout time.Duration) *DeleteRdmaipamRdmaipsParams {
	var ()
	return &DeleteRdmaipamRdmaipsParams{

		timeout: timeout,
	}
}

// NewDeleteRdmaipamRdmaipsParamsWithContext creates a new DeleteRdmaipamRdmaipsParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteRdmaipamRdmaipsParamsWithContext(ctx context.Context) *DeleteRdmaipamRdmaipsParams {
	var ()
	return &DeleteRdmaipamRdmaipsParams{

		Context: ctx,
	}
}

// NewDeleteRdmaipamRdmaipsParamsWithHTTPClient creates a new DeleteRdmaipamRdmaipsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteRdmaipamRdmaipsParamsWithHTTPClient(client *http.Client) *DeleteRdmaipamRdmaipsParams {
	var ()
	return &DeleteRdmaipamRdmaipsParams{
		HTTPClient: client,
	}
}

/*
DeleteRdmaipamRdmaipsParams contains all the parameters to send to the API endpoint
for the delete rdmaipam rdmaips operation typically these are written to a http.Request
*/
type DeleteRdmaipamRdmaipsParams struct {

	/*ContainerID
	  container id provider by cni

	*/
	ContainerID *string
	/*Netns
	  netns provider by cni

	*/
	Netns *string
	/*Owner*/
	Owner *string
	/*RdmaIfnames
	  rdma ifnames provider by cni

	*/
	RdmaIfnames *string
	/*Rdmaips
	  RDMA IP addresses or owner name

	*/
	Rdmaips string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete rdmaipam rdmaips params
func (o *DeleteRdmaipamRdmaipsParams) WithTimeout(timeout time.Duration) *DeleteRdmaipamRdmaipsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete rdmaipam rdmaips params
func (o *DeleteRdmaipamRdmaipsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete rdmaipam rdmaips params
func (o *DeleteRdmaipamRdmaipsParams) WithContext(ctx context.Context) *DeleteRdmaipamRdmaipsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete rdmaipam rdmaips params
func (o *DeleteRdmaipamRdmaipsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete rdmaipam rdmaips params
func (o *DeleteRdmaipamRdmaipsParams) WithHTTPClient(client *http.Client) *DeleteRdmaipamRdmaipsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete rdmaipam rdmaips params
func (o *DeleteRdmaipamRdmaipsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContainerID adds the containerID to the delete rdmaipam rdmaips params
func (o *DeleteRdmaipamRdmaipsParams) WithContainerID(containerID *string) *DeleteRdmaipamRdmaipsParams {
	o.SetContainerID(containerID)
	return o
}

// SetContainerID adds the containerId to the delete rdmaipam rdmaips params
func (o *DeleteRdmaipamRdmaipsParams) SetContainerID(containerID *string) {
	o.ContainerID = containerID
}

// WithNetns adds the netns to the delete rdmaipam rdmaips params
func (o *DeleteRdmaipamRdmaipsParams) WithNetns(netns *string) *DeleteRdmaipamRdmaipsParams {
	o.SetNetns(netns)
	return o
}

// SetNetns adds the netns to the delete rdmaipam rdmaips params
func (o *DeleteRdmaipamRdmaipsParams) SetNetns(netns *string) {
	o.Netns = netns
}

// WithOwner adds the owner to the delete rdmaipam rdmaips params
func (o *DeleteRdmaipamRdmaipsParams) WithOwner(owner *string) *DeleteRdmaipamRdmaipsParams {
	o.SetOwner(owner)
	return o
}

// SetOwner adds the owner to the delete rdmaipam rdmaips params
func (o *DeleteRdmaipamRdmaipsParams) SetOwner(owner *string) {
	o.Owner = owner
}

// WithRdmaIfnames adds the rdmaIfnames to the delete rdmaipam rdmaips params
func (o *DeleteRdmaipamRdmaipsParams) WithRdmaIfnames(rdmaIfnames *string) *DeleteRdmaipamRdmaipsParams {
	o.SetRdmaIfnames(rdmaIfnames)
	return o
}

// SetRdmaIfnames adds the rdmaIfnames to the delete rdmaipam rdmaips params
func (o *DeleteRdmaipamRdmaipsParams) SetRdmaIfnames(rdmaIfnames *string) {
	o.RdmaIfnames = rdmaIfnames
}

// WithRdmaips adds the rdmaips to the delete rdmaipam rdmaips params
func (o *DeleteRdmaipamRdmaipsParams) WithRdmaips(rdmaips string) *DeleteRdmaipamRdmaipsParams {
	o.SetRdmaips(rdmaips)
	return o
}

// SetRdmaips adds the rdmaips to the delete rdmaipam rdmaips params
func (o *DeleteRdmaipamRdmaipsParams) SetRdmaips(rdmaips string) {
	o.Rdmaips = rdmaips
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteRdmaipamRdmaipsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ContainerID != nil {

		// query param containerID
		var qrContainerID string
		if o.ContainerID != nil {
			qrContainerID = *o.ContainerID
		}
		qContainerID := qrContainerID
		if qContainerID != "" {
			if err := r.SetQueryParam("containerID", qContainerID); err != nil {
				return err
			}
		}

	}

	if o.Netns != nil {

		// query param netns
		var qrNetns string
		if o.Netns != nil {
			qrNetns = *o.Netns
		}
		qNetns := qrNetns
		if qNetns != "" {
			if err := r.SetQueryParam("netns", qNetns); err != nil {
				return err
			}
		}

	}

	if o.Owner != nil {

		// query param owner
		var qrOwner string
		if o.Owner != nil {
			qrOwner = *o.Owner
		}
		qOwner := qrOwner
		if qOwner != "" {
			if err := r.SetQueryParam("owner", qOwner); err != nil {
				return err
			}
		}

	}

	if o.RdmaIfnames != nil {

		// query param rdmaIfnames
		var qrRdmaIfnames string
		if o.RdmaIfnames != nil {
			qrRdmaIfnames = *o.RdmaIfnames
		}
		qRdmaIfnames := qrRdmaIfnames
		if qRdmaIfnames != "" {
			if err := r.SetQueryParam("rdmaIfnames", qRdmaIfnames); err != nil {
				return err
			}
		}

	}

	// path param rdmaips
	if err := r.SetPathParam("rdmaips", o.Rdmaips); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
