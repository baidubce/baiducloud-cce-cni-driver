// Code generated by go-swagger; DO NOT EDIT.

// /*
//  * Copyright (c) 2023 Baidu, Inc. All Rights Reserved.
//  *
//  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
//  * except in compliance with the License. You may obtain a copy of the License at
//  *
//  * http://www.apache.org/licenses/LICENSE-2.0
//  *
//  * Unless required by applicable law or agreed to in writing, software distributed under the
//  * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
//  * either express or implied. See the License for the specific language governing permissions
//  * and limitations under the License.
//  *
//  */

package endpoint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutEndpointProbeHandlerFunc turns a function with the right signature into a put endpoint probe handler
type PutEndpointProbeHandlerFunc func(PutEndpointProbeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutEndpointProbeHandlerFunc) Handle(params PutEndpointProbeParams) middleware.Responder {
	return fn(params)
}

// PutEndpointProbeHandler interface for that can handle valid put endpoint probe params
type PutEndpointProbeHandler interface {
	Handle(PutEndpointProbeParams) middleware.Responder
}

// NewPutEndpointProbe creates a new http.Handler for the put endpoint probe operation
func NewPutEndpointProbe(ctx *middleware.Context, handler PutEndpointProbeHandler) *PutEndpointProbe {
	return &PutEndpointProbe{Context: ctx, Handler: handler}
}

/*
PutEndpointProbe swagger:route PUT /endpoint/probe endpoint putEndpointProbe

create or update endpint probe
*/
type PutEndpointProbe struct {
	Context *middleware.Context
	Handler PutEndpointProbeHandler
}

func (o *PutEndpointProbe) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutEndpointProbeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
