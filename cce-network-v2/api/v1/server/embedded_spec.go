// Code generated by go-swagger; DO NOT EDIT.

// /*
//  * Copyright (c) 2023 Baidu, Inc. All Rights Reserved.
//  *
//  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
//  * except in compliance with the License. You may obtain a copy of the License at
//  *
//  * http://www.apache.org/licenses/LICENSE-2.0
//  *
//  * Unless required by applicable law or agreed to in writing, software distributed under the
//  * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
//  * either express or implied. See the License for the specific language governing permissions
//  * and limitations under the License.
//  *
//  */

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "description": "CCE",
    "title": "Cce API",
    "version": "v1beta"
  },
  "basePath": "/v1",
  "paths": {
    "/endpoint/extplugin/status": {
      "get": {
        "tags": [
          "endpoint"
        ],
        "summary": "get external plugin status",
        "parameters": [
          {
            "$ref": "#/parameters/ipam-owner"
          },
          {
            "$ref": "#/parameters/ipam-containerid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ExtFeatureData"
            }
          },
          "500": {
            "description": "failed to get external plugin status. Details in message.",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "Failure"
          }
        }
      }
    },
    "/endpoint/probe": {
      "put": {
        "tags": [
          "endpoint"
        ],
        "summary": "create or update endpint probe",
        "parameters": [
          {
            "$ref": "#/parameters/ipam-owner"
          },
          {
            "$ref": "#/parameters/ipam-containerid"
          },
          {
            "$ref": "#/parameters/ipam-netns"
          },
          {
            "$ref": "#/parameters/ipam-ifname"
          },
          {
            "$ref": "#/parameters/cni-driver"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EndpointProbeResponse"
            }
          },
          "500": {
            "description": "update endpoint failed. Details in message.",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "Failure"
          }
        }
      }
    },
    "/eni": {
      "post": {
        "tags": [
          "eni"
        ],
        "summary": "Allocate an IP address for exclusive ENI",
        "parameters": [
          {
            "$ref": "#/parameters/eni-spec"
          },
          {
            "$ref": "#/parameters/ipam-owner"
          },
          {
            "$ref": "#/parameters/ipam-containerid"
          },
          {
            "$ref": "#/parameters/ipam-netns"
          },
          {
            "$ref": "#/parameters/ipam-ifname"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/IPAMResponse"
            }
          },
          "400": {
            "description": "Invalid IP address",
            "x-go-name": "Invalid"
          },
          "409": {
            "description": "IP already allocated",
            "x-go-name": "Exists"
          },
          "500": {
            "description": "IP allocation failure. Details in message.",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "Failure"
          },
          "501": {
            "description": "Allocation for address family disabled",
            "x-go-name": "Disabled"
          }
        }
      },
      "delete": {
        "tags": [
          "eni"
        ],
        "summary": "Release an allocated IP address for exclusive ENI",
        "parameters": [
          {
            "$ref": "#/parameters/ipam-owner"
          },
          {
            "$ref": "#/parameters/ipam-containerid"
          },
          {
            "$ref": "#/parameters/ipam-netns"
          },
          {
            "$ref": "#/parameters/ipam-ifname"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid IP address",
            "x-go-name": "Invalid"
          },
          "404": {
            "description": "IP address not found"
          },
          "500": {
            "description": "Address release failure",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "Failure"
          },
          "501": {
            "description": "Allocation for address family disabled",
            "x-go-name": "Disabled"
          }
        }
      }
    },
    "/healthz": {
      "get": {
        "description": "Returns health and status information of the CCE daemon and related\ncomponents such as the local container runtime, connected datastore,\nKubernetes integration and Hubble.\n",
        "tags": [
          "daemon"
        ],
        "summary": "Get health of CCE daemon",
        "parameters": [
          {
            "type": "boolean",
            "description": "Brief will return a brief representation of the CCE status.\n",
            "name": "brief",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StatusResponse"
            }
          }
        }
      }
    },
    "/ipam": {
      "post": {
        "tags": [
          "ipam"
        ],
        "summary": "Allocate an IP address",
        "parameters": [
          {
            "$ref": "#/parameters/ipam-family"
          },
          {
            "$ref": "#/parameters/ipam-owner"
          },
          {
            "$ref": "#/parameters/ipam-expiration"
          },
          {
            "$ref": "#/parameters/ipam-containerid"
          },
          {
            "$ref": "#/parameters/ipam-netns"
          },
          {
            "$ref": "#/parameters/ipam-ifname"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/IPAMResponse"
            }
          },
          "502": {
            "description": "Allocation failure",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "Failure"
          }
        }
      }
    },
    "/ipam/{ip}": {
      "post": {
        "tags": [
          "ipam"
        ],
        "summary": "Allocate an IP address",
        "parameters": [
          {
            "$ref": "#/parameters/ipam-ip"
          },
          {
            "$ref": "#/parameters/ipam-owner"
          },
          {
            "$ref": "#/parameters/ipam-containerid"
          },
          {
            "$ref": "#/parameters/ipam-netns"
          },
          {
            "$ref": "#/parameters/ipam-ifname"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid IP address",
            "x-go-name": "Invalid"
          },
          "409": {
            "description": "IP already allocated",
            "x-go-name": "Exists"
          },
          "500": {
            "description": "IP allocation failure. Details in message.",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "Failure"
          },
          "501": {
            "description": "Allocation for address family disabled",
            "x-go-name": "Disabled"
          }
        }
      },
      "delete": {
        "tags": [
          "ipam"
        ],
        "summary": "Release an allocated IP address",
        "parameters": [
          {
            "$ref": "#/parameters/ipam-release-arg"
          },
          {
            "$ref": "#/parameters/ipam-owner"
          },
          {
            "$ref": "#/parameters/ipam-containerid"
          },
          {
            "$ref": "#/parameters/ipam-netns"
          },
          {
            "$ref": "#/parameters/ipam-ifname"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid IP address",
            "x-go-name": "Invalid"
          },
          "404": {
            "description": "IP address not found"
          },
          "500": {
            "description": "Address release failure",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "Failure"
          },
          "501": {
            "description": "Allocation for address family disabled",
            "x-go-name": "Disabled"
          }
        }
      }
    },
    "/metrics/": {
      "get": {
        "tags": [
          "metrics"
        ],
        "summary": "Retrieve CCE metrics",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Metric"
              }
            }
          },
          "500": {
            "description": "Metrics cannot be retrieved"
          }
        }
      }
    }
  },
  "definitions": {
    "Address": {
      "description": "IP address",
      "type": "string"
    },
    "AddressPair": {
      "description": "Addressing information of an endpoint",
      "type": "object",
      "properties": {
        "ipv4": {
          "description": "IPv4 address",
          "type": "string"
        },
        "ipv4-expiration-uuid": {
          "description": "UUID of IPv4 expiration timer",
          "type": "string"
        },
        "ipv6": {
          "description": "IPv6 address",
          "type": "string"
        },
        "ipv6-expiration-uuid": {
          "description": "UUID of IPv6 expiration timer",
          "type": "string"
        }
      }
    },
    "BandwidthOption": {
      "description": "BandwidthOption is the bandwidth option of network\n+k8s:deepcopy-gen=true\n",
      "type": "object",
      "properties": {
        "egress": {
          "type": "integer",
          "x-omitempty": true
        },
        "ingress": {
          "type": "integer",
          "x-omitempty": true
        },
        "mode": {
          "type": "string",
          "enum": [
            "edt",
            "tc",
            ""
          ],
          "x-omitempty": true
        }
      }
    },
    "ControllerStatus": {
      "description": "Status of a controller\n\n+k8s:deepcopy-gen=true",
      "type": "object",
      "properties": {
        "configuration": {
          "description": "Configuration of controller\n\n+deepequal-gen=true\n+k8s:deepcopy-gen=true",
          "type": "object",
          "properties": {
            "error-retry": {
              "description": "Retry on error",
              "type": "boolean"
            },
            "error-retry-base": {
              "description": "Base error retry back-off time",
              "type": "string",
              "format": "duration"
            },
            "interval": {
              "description": "Regular synchronization interval",
              "type": "string",
              "format": "duration"
            }
          }
        },
        "name": {
          "description": "Name of controller",
          "type": "string"
        },
        "status": {
          "description": "Current status of controller\n\n+k8s:deepcopy-gen=true",
          "type": "object",
          "properties": {
            "consecutive-failure-count": {
              "description": "Number of consecutive errors since last success",
              "type": "integer"
            },
            "failure-count": {
              "description": "Total number of failed runs",
              "type": "integer"
            },
            "last-failure-msg": {
              "description": "Error message of last failed run",
              "type": "string"
            },
            "last-failure-timestamp": {
              "description": "Timestamp of last error",
              "type": "string",
              "format": "date-time"
            },
            "last-success-timestamp": {
              "description": "Timestamp of last success",
              "type": "string",
              "format": "date-time"
            },
            "success-count": {
              "description": "Total number of successful runs",
              "type": "integer"
            }
          }
        },
        "uuid": {
          "description": "UUID of controller",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "ControllerStatuses": {
      "description": "Collection of controller statuses",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ControllerStatus"
      }
    },
    "DatapathMode": {
      "description": "Datapath mode",
      "type": "string",
      "enum": [
        "veth",
        "ipvlan"
      ]
    },
    "ENI": {
      "description": "eni definition\n\n+k8s:deepcopy-gen=true\n",
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "enterpriseSecurityGroupIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": true
        },
        "id": {
          "description": "ID unique identifier available for the resource",
          "type": "string"
        },
        "instanceID": {
          "description": "InstanceID insance ID of node resource, like ID of BCC.\nThis field represents the node name that ENI expects to attached.\nExample:\ni-wWANcEYK\n",
          "type": "string"
        },
        "ipv6PrivateIPSet": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PrivateIP"
          },
          "x-omitempty": true
        },
        "macAddress": {
          "description": "MacAddress mac address of eni instance\nAfter the ENI is attached to the VM, the ENI device should be found in the\nVM through this mac address\nExample:\nfa:26:00:0d:51:c7\n",
          "type": "string"
        },
        "name": {
          "description": "The name of eni was created by CCE and format as {clusterID}-{instance_name}-{randmon}",
          "type": "string"
        },
        "privateIPSet": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PrivateIP"
          },
          "x-omitempty": true
        },
        "securityGroupIds": {
          "description": "SecurityGroupIds list of security group IDs\nAn ENI should have at least one default security group\nExample:\n[\"g-xpy9eitxhfib\"]\n",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": true
        },
        "subnetID": {
          "description": "SubnetID subnet id of eni instance\nIn scenarios where ENI is used across Subnet (such as PodSubnetTopologySpread), the subnet ID of ENI may\nbe different from secondry IP of the ENI.\nExample:\nsbn-na1y2xryjyf3\n",
          "type": "string"
        },
        "vpcID": {
          "description": "VPCID vpc id of eni instance\nIn scenarios where ENI is used across VPCs (such as BCI), the VPC ID of ENI may\nbe different from that of the cluster\nExample:\nvpc-8nh1ks7a55a2\n",
          "type": "string"
        },
        "zoneName": {
          "description": "ZoneName zone name of eni instance",
          "type": "string"
        }
      }
    },
    "EndpointIdentifiers": {
      "description": "Unique identifiers for this endpoint from outside CCE\n\n+deepequal-gen=true",
      "type": "object",
      "properties": {
        "cnidriver": {
          "description": "device driver name",
          "type": "string"
        },
        "container-id": {
          "description": "ID assigned by container runtime",
          "type": "string"
        },
        "container-name": {
          "description": "Name assigned to container",
          "type": "string"
        },
        "external-identifier": {
          "description": "External network ID, such as the ID of the ENI occupied by the container",
          "type": "string"
        },
        "k8s-namespace": {
          "description": "K8s namespace for this endpoint",
          "type": "string"
        },
        "k8s-object-id": {
          "description": "K8s object id to indentifier a unique object",
          "type": "string"
        },
        "k8s-pod-name": {
          "description": "K8s pod name for this endpoint",
          "type": "string"
        },
        "netns": {
          "description": "netns use by CNI",
          "type": "string"
        },
        "pod-name": {
          "description": "K8s pod for this endpoint(Deprecated, use K8sPodName and K8sNamespace instead)",
          "type": "string"
        }
      }
    },
    "EndpointProbeResponse": {
      "description": "EndpointProbeResponse is the response of probe endpoint\n",
      "type": "object",
      "properties": {
        "bandWidth": {
          "x-omitempty": true,
          "$ref": "#/definitions/BandwidthOption"
        },
        "featureGates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtFeatureData"
          },
          "x-omitempty": true
        }
      }
    },
    "EndpointState": {
      "description": "State of endpoint",
      "type": "string",
      "enum": [
        "waiting-for-identity",
        "not-ready",
        "waiting-to-regenerate",
        "regenerating",
        "restoring",
        "ready",
        "disconnecting",
        "disconnected",
        "invalid",
        "ip-allocated",
        "pod-deleted"
      ]
    },
    "EndpointStatusChange": {
      "description": "Indication of a change of status\n\n+deepequal-gen=true",
      "type": "object",
      "properties": {
        "code": {
          "description": "Code indicate type of status change",
          "type": "string",
          "enum": [
            "ok",
            "failed"
          ]
        },
        "message": {
          "description": "Status message",
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/EndpointState"
        },
        "timestamp": {
          "description": "Timestamp when status change occurred",
          "type": "string"
        }
      }
    },
    "EndpointStatusLog": {
      "description": "Status log of endpoint",
      "type": "array",
      "items": {
        "$ref": "#/definitions/EndpointStatusChange"
      }
    },
    "Error": {
      "type": "string"
    },
    "ExtFeatureData": {
      "description": "ExtFeatureData is a map",
      "type": "object",
      "additionalProperties": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      }
    },
    "IPAMAddressResponse": {
      "description": "IPAM configuration of an individual address family",
      "type": "object",
      "properties": {
        "cidrs": {
          "description": "List of CIDRs out of which IPs are allocated",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "expiration-uuid": {
          "description": "The UUID for the expiration timer. Set when expiration has been\nenabled while allocating.\n",
          "type": "string"
        },
        "gateway": {
          "description": "IP of gateway",
          "type": "string"
        },
        "interface-number": {
          "description": "InterfaceNumber is a field for generically identifying an interface. This is only useful in ENI mode.\n",
          "type": "string"
        },
        "ip": {
          "description": "Allocated IP for endpoint",
          "type": "string"
        },
        "master-mac": {
          "description": "MAC of master interface if address is a slave/secondary of a master interface",
          "type": "string"
        }
      }
    },
    "IPAMResponse": {
      "description": "IPAM configuration of an endpoint",
      "type": "object",
      "required": [
        "address",
        "host-addressing"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/AddressPair"
        },
        "host-addressing": {
          "$ref": "#/definitions/NodeAddressing"
        },
        "ipv4": {
          "$ref": "#/definitions/IPAMAddressResponse"
        },
        "ipv6": {
          "$ref": "#/definitions/IPAMAddressResponse"
        }
      }
    },
    "Metric": {
      "description": "Metric information",
      "type": "object",
      "properties": {
        "labels": {
          "description": "Labels of the metric",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name of the metric",
          "type": "string"
        },
        "value": {
          "description": "Value of the metric",
          "type": "number"
        }
      }
    },
    "NodeAddressing": {
      "description": "Addressing information of a node for all address families\n\n+k8s:deepcopy-gen=true",
      "type": "object",
      "properties": {
        "ipv4": {
          "$ref": "#/definitions/NodeAddressingElement"
        },
        "ipv6": {
          "$ref": "#/definitions/NodeAddressingElement"
        }
      }
    },
    "NodeAddressingElement": {
      "description": "Addressing information",
      "type": "object",
      "properties": {
        "address-type": {
          "description": "Node address type, one of HostName, ExternalIP or InternalIP",
          "type": "string"
        },
        "alloc-range": {
          "description": "Address pool to be used for local endpoints",
          "type": "string"
        },
        "enabled": {
          "description": "True if address family is enabled",
          "type": "boolean"
        },
        "ip": {
          "description": "IP address of node",
          "type": "string"
        }
      }
    },
    "PrivateIP": {
      "description": "VPC IP address\n\n+k8s:deepcopy-gen=true\n",
      "type": "object",
      "properties": {
        "cidrAddress": {
          "type": "string"
        },
        "gatewayIP": {
          "type": "string"
        },
        "primary": {
          "type": "boolean"
        },
        "privateIPAddress": {
          "type": "string"
        },
        "publicIPAddress": {
          "type": "string"
        },
        "subnetID": {
          "description": "SubnetID subnet id of  private ip assigned with this.\nWhen allocating IP across subnets, the subnet of private IP may be\ndifferent from ENI\n",
          "type": "string"
        }
      }
    },
    "Status": {
      "description": "Status of an individual component\n\n+k8s:deepcopy-gen=true\n",
      "type": "object",
      "properties": {
        "msg": {
          "description": "Human readable status/error/warning message",
          "type": "string"
        },
        "state": {
          "description": "State the component is in",
          "type": "string",
          "enum": [
            "Ok",
            "Warning",
            "Failure",
            "Disabled"
          ]
        }
      }
    },
    "StatusResponse": {
      "description": "Health and status information of daemon\n\n+k8s:deepcopy-gen=true",
      "type": "object",
      "properties": {
        "cce": {
          "description": "Status of CCE daemon",
          "$ref": "#/definitions/Status"
        },
        "client-id": {
          "description": "When supported by the API, this client ID should be used by the\nclient when making another request to the server.\nSee for example \"/cluster/nodes\".\n",
          "type": "string"
        },
        "container-runtime": {
          "description": "Status of local container runtime",
          "$ref": "#/definitions/Status"
        },
        "controllers": {
          "description": "Status of all endpoint controllers",
          "$ref": "#/definitions/ControllerStatuses"
        },
        "stale": {
          "description": "List of stale information in the status",
          "type": "object",
          "additionalProperties": {
            "description": "Timestamp when the probe was started",
            "type": "string",
            "format": "date-time"
          }
        }
      }
    }
  },
  "parameters": {
    "cidr": {
      "type": "string",
      "description": "A CIDR range of IPs",
      "name": "cidr",
      "in": "query"
    },
    "cni-driver": {
      "type": "string",
      "name": "cni-driver",
      "in": "query"
    },
    "eni-spec": {
      "description": "Expectations when applying for ENI",
      "name": "eni",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/ENI"
      }
    },
    "ipam-containerid": {
      "type": "string",
      "description": "container id provider by cni",
      "name": "containerID",
      "in": "query"
    },
    "ipam-expiration": {
      "type": "boolean",
      "name": "expiration",
      "in": "header"
    },
    "ipam-family": {
      "enum": [
        "ipv4",
        "ipv6"
      ],
      "type": "string",
      "name": "family",
      "in": "query"
    },
    "ipam-ifname": {
      "type": "string",
      "description": "ifname provider by cni",
      "name": "ifname",
      "in": "query"
    },
    "ipam-ip": {
      "type": "string",
      "description": "IP address",
      "name": "ip",
      "in": "path",
      "required": true
    },
    "ipam-netns": {
      "type": "string",
      "description": "netns provider by cni",
      "name": "netns",
      "in": "query"
    },
    "ipam-owner": {
      "type": "string",
      "name": "owner",
      "in": "query"
    },
    "ipam-release-arg": {
      "type": "string",
      "description": "IP address or owner name",
      "name": "ip",
      "in": "path",
      "required": true
    },
    "pod-name": {
      "type": "string",
      "description": "K8s pod name\n",
      "name": "pod",
      "in": "path",
      "required": true
    },
    "source": {
      "type": "string",
      "description": "Source from which FQDN entries come from",
      "name": "source",
      "in": "query"
    }
  },
  "x-schemes": [
    "unix"
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "description": "CCE",
    "title": "Cce API",
    "version": "v1beta"
  },
  "basePath": "/v1",
  "paths": {
    "/endpoint/extplugin/status": {
      "get": {
        "tags": [
          "endpoint"
        ],
        "summary": "get external plugin status",
        "parameters": [
          {
            "type": "string",
            "name": "owner",
            "in": "query"
          },
          {
            "type": "string",
            "description": "container id provider by cni",
            "name": "containerID",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ExtFeatureData"
            }
          },
          "500": {
            "description": "failed to get external plugin status. Details in message.",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "Failure"
          }
        }
      }
    },
    "/endpoint/probe": {
      "put": {
        "tags": [
          "endpoint"
        ],
        "summary": "create or update endpint probe",
        "parameters": [
          {
            "type": "string",
            "name": "owner",
            "in": "query"
          },
          {
            "type": "string",
            "description": "container id provider by cni",
            "name": "containerID",
            "in": "query"
          },
          {
            "type": "string",
            "description": "netns provider by cni",
            "name": "netns",
            "in": "query"
          },
          {
            "type": "string",
            "description": "ifname provider by cni",
            "name": "ifname",
            "in": "query"
          },
          {
            "type": "string",
            "name": "cni-driver",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EndpointProbeResponse"
            }
          },
          "500": {
            "description": "update endpoint failed. Details in message.",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "Failure"
          }
        }
      }
    },
    "/eni": {
      "post": {
        "tags": [
          "eni"
        ],
        "summary": "Allocate an IP address for exclusive ENI",
        "parameters": [
          {
            "description": "Expectations when applying for ENI",
            "name": "eni",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ENI"
            }
          },
          {
            "type": "string",
            "name": "owner",
            "in": "query"
          },
          {
            "type": "string",
            "description": "container id provider by cni",
            "name": "containerID",
            "in": "query"
          },
          {
            "type": "string",
            "description": "netns provider by cni",
            "name": "netns",
            "in": "query"
          },
          {
            "type": "string",
            "description": "ifname provider by cni",
            "name": "ifname",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/IPAMResponse"
            }
          },
          "400": {
            "description": "Invalid IP address",
            "x-go-name": "Invalid"
          },
          "409": {
            "description": "IP already allocated",
            "x-go-name": "Exists"
          },
          "500": {
            "description": "IP allocation failure. Details in message.",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "Failure"
          },
          "501": {
            "description": "Allocation for address family disabled",
            "x-go-name": "Disabled"
          }
        }
      },
      "delete": {
        "tags": [
          "eni"
        ],
        "summary": "Release an allocated IP address for exclusive ENI",
        "parameters": [
          {
            "type": "string",
            "name": "owner",
            "in": "query"
          },
          {
            "type": "string",
            "description": "container id provider by cni",
            "name": "containerID",
            "in": "query"
          },
          {
            "type": "string",
            "description": "netns provider by cni",
            "name": "netns",
            "in": "query"
          },
          {
            "type": "string",
            "description": "ifname provider by cni",
            "name": "ifname",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid IP address",
            "x-go-name": "Invalid"
          },
          "404": {
            "description": "IP address not found"
          },
          "500": {
            "description": "Address release failure",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "Failure"
          },
          "501": {
            "description": "Allocation for address family disabled",
            "x-go-name": "Disabled"
          }
        }
      }
    },
    "/healthz": {
      "get": {
        "description": "Returns health and status information of the CCE daemon and related\ncomponents such as the local container runtime, connected datastore,\nKubernetes integration and Hubble.\n",
        "tags": [
          "daemon"
        ],
        "summary": "Get health of CCE daemon",
        "parameters": [
          {
            "type": "boolean",
            "description": "Brief will return a brief representation of the CCE status.\n",
            "name": "brief",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StatusResponse"
            }
          }
        }
      }
    },
    "/ipam": {
      "post": {
        "tags": [
          "ipam"
        ],
        "summary": "Allocate an IP address",
        "parameters": [
          {
            "enum": [
              "ipv4",
              "ipv6"
            ],
            "type": "string",
            "name": "family",
            "in": "query"
          },
          {
            "type": "string",
            "name": "owner",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "expiration",
            "in": "header"
          },
          {
            "type": "string",
            "description": "container id provider by cni",
            "name": "containerID",
            "in": "query"
          },
          {
            "type": "string",
            "description": "netns provider by cni",
            "name": "netns",
            "in": "query"
          },
          {
            "type": "string",
            "description": "ifname provider by cni",
            "name": "ifname",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/IPAMResponse"
            }
          },
          "502": {
            "description": "Allocation failure",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "Failure"
          }
        }
      }
    },
    "/ipam/{ip}": {
      "post": {
        "tags": [
          "ipam"
        ],
        "summary": "Allocate an IP address",
        "parameters": [
          {
            "type": "string",
            "description": "IP address",
            "name": "ip",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "owner",
            "in": "query"
          },
          {
            "type": "string",
            "description": "container id provider by cni",
            "name": "containerID",
            "in": "query"
          },
          {
            "type": "string",
            "description": "netns provider by cni",
            "name": "netns",
            "in": "query"
          },
          {
            "type": "string",
            "description": "ifname provider by cni",
            "name": "ifname",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid IP address",
            "x-go-name": "Invalid"
          },
          "409": {
            "description": "IP already allocated",
            "x-go-name": "Exists"
          },
          "500": {
            "description": "IP allocation failure. Details in message.",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "Failure"
          },
          "501": {
            "description": "Allocation for address family disabled",
            "x-go-name": "Disabled"
          }
        }
      },
      "delete": {
        "tags": [
          "ipam"
        ],
        "summary": "Release an allocated IP address",
        "parameters": [
          {
            "type": "string",
            "description": "IP address or owner name",
            "name": "ip",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "owner",
            "in": "query"
          },
          {
            "type": "string",
            "description": "container id provider by cni",
            "name": "containerID",
            "in": "query"
          },
          {
            "type": "string",
            "description": "netns provider by cni",
            "name": "netns",
            "in": "query"
          },
          {
            "type": "string",
            "description": "ifname provider by cni",
            "name": "ifname",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid IP address",
            "x-go-name": "Invalid"
          },
          "404": {
            "description": "IP address not found"
          },
          "500": {
            "description": "Address release failure",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "Failure"
          },
          "501": {
            "description": "Allocation for address family disabled",
            "x-go-name": "Disabled"
          }
        }
      }
    },
    "/metrics/": {
      "get": {
        "tags": [
          "metrics"
        ],
        "summary": "Retrieve CCE metrics",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Metric"
              }
            }
          },
          "500": {
            "description": "Metrics cannot be retrieved"
          }
        }
      }
    }
  },
  "definitions": {
    "Address": {
      "description": "IP address",
      "type": "string"
    },
    "AddressPair": {
      "description": "Addressing information of an endpoint",
      "type": "object",
      "properties": {
        "ipv4": {
          "description": "IPv4 address",
          "type": "string"
        },
        "ipv4-expiration-uuid": {
          "description": "UUID of IPv4 expiration timer",
          "type": "string"
        },
        "ipv6": {
          "description": "IPv6 address",
          "type": "string"
        },
        "ipv6-expiration-uuid": {
          "description": "UUID of IPv6 expiration timer",
          "type": "string"
        }
      }
    },
    "BandwidthOption": {
      "description": "BandwidthOption is the bandwidth option of network\n+k8s:deepcopy-gen=true\n",
      "type": "object",
      "properties": {
        "egress": {
          "type": "integer",
          "x-omitempty": true
        },
        "ingress": {
          "type": "integer",
          "x-omitempty": true
        },
        "mode": {
          "type": "string",
          "enum": [
            "edt",
            "tc",
            ""
          ],
          "x-omitempty": true
        }
      }
    },
    "ControllerStatus": {
      "description": "Status of a controller\n\n+k8s:deepcopy-gen=true",
      "type": "object",
      "properties": {
        "configuration": {
          "description": "Configuration of controller\n\n+deepequal-gen=true\n+k8s:deepcopy-gen=true",
          "type": "object",
          "properties": {
            "error-retry": {
              "description": "Retry on error",
              "type": "boolean"
            },
            "error-retry-base": {
              "description": "Base error retry back-off time",
              "type": "string",
              "format": "duration"
            },
            "interval": {
              "description": "Regular synchronization interval",
              "type": "string",
              "format": "duration"
            }
          }
        },
        "name": {
          "description": "Name of controller",
          "type": "string"
        },
        "status": {
          "description": "Current status of controller\n\n+k8s:deepcopy-gen=true",
          "type": "object",
          "properties": {
            "consecutive-failure-count": {
              "description": "Number of consecutive errors since last success",
              "type": "integer"
            },
            "failure-count": {
              "description": "Total number of failed runs",
              "type": "integer"
            },
            "last-failure-msg": {
              "description": "Error message of last failed run",
              "type": "string"
            },
            "last-failure-timestamp": {
              "description": "Timestamp of last error",
              "type": "string",
              "format": "date-time"
            },
            "last-success-timestamp": {
              "description": "Timestamp of last success",
              "type": "string",
              "format": "date-time"
            },
            "success-count": {
              "description": "Total number of successful runs",
              "type": "integer"
            }
          }
        },
        "uuid": {
          "description": "UUID of controller",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "ControllerStatusConfiguration": {
      "description": "Configuration of controller\n\n+deepequal-gen=true\n+k8s:deepcopy-gen=true",
      "type": "object",
      "properties": {
        "error-retry": {
          "description": "Retry on error",
          "type": "boolean"
        },
        "error-retry-base": {
          "description": "Base error retry back-off time",
          "type": "string",
          "format": "duration"
        },
        "interval": {
          "description": "Regular synchronization interval",
          "type": "string",
          "format": "duration"
        }
      }
    },
    "ControllerStatusStatus": {
      "description": "Current status of controller\n\n+k8s:deepcopy-gen=true",
      "type": "object",
      "properties": {
        "consecutive-failure-count": {
          "description": "Number of consecutive errors since last success",
          "type": "integer"
        },
        "failure-count": {
          "description": "Total number of failed runs",
          "type": "integer"
        },
        "last-failure-msg": {
          "description": "Error message of last failed run",
          "type": "string"
        },
        "last-failure-timestamp": {
          "description": "Timestamp of last error",
          "type": "string",
          "format": "date-time"
        },
        "last-success-timestamp": {
          "description": "Timestamp of last success",
          "type": "string",
          "format": "date-time"
        },
        "success-count": {
          "description": "Total number of successful runs",
          "type": "integer"
        }
      }
    },
    "ControllerStatuses": {
      "description": "Collection of controller statuses",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ControllerStatus"
      }
    },
    "DatapathMode": {
      "description": "Datapath mode",
      "type": "string",
      "enum": [
        "veth",
        "ipvlan"
      ]
    },
    "ENI": {
      "description": "eni definition\n\n+k8s:deepcopy-gen=true\n",
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "enterpriseSecurityGroupIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": true
        },
        "id": {
          "description": "ID unique identifier available for the resource",
          "type": "string"
        },
        "instanceID": {
          "description": "InstanceID insance ID of node resource, like ID of BCC.\nThis field represents the node name that ENI expects to attached.\nExample:\ni-wWANcEYK\n",
          "type": "string"
        },
        "ipv6PrivateIPSet": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PrivateIP"
          },
          "x-omitempty": true
        },
        "macAddress": {
          "description": "MacAddress mac address of eni instance\nAfter the ENI is attached to the VM, the ENI device should be found in the\nVM through this mac address\nExample:\nfa:26:00:0d:51:c7\n",
          "type": "string"
        },
        "name": {
          "description": "The name of eni was created by CCE and format as {clusterID}-{instance_name}-{randmon}",
          "type": "string"
        },
        "privateIPSet": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PrivateIP"
          },
          "x-omitempty": true
        },
        "securityGroupIds": {
          "description": "SecurityGroupIds list of security group IDs\nAn ENI should have at least one default security group\nExample:\n[\"g-xpy9eitxhfib\"]\n",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": true
        },
        "subnetID": {
          "description": "SubnetID subnet id of eni instance\nIn scenarios where ENI is used across Subnet (such as PodSubnetTopologySpread), the subnet ID of ENI may\nbe different from secondry IP of the ENI.\nExample:\nsbn-na1y2xryjyf3\n",
          "type": "string"
        },
        "vpcID": {
          "description": "VPCID vpc id of eni instance\nIn scenarios where ENI is used across VPCs (such as BCI), the VPC ID of ENI may\nbe different from that of the cluster\nExample:\nvpc-8nh1ks7a55a2\n",
          "type": "string"
        },
        "zoneName": {
          "description": "ZoneName zone name of eni instance",
          "type": "string"
        }
      }
    },
    "EndpointIdentifiers": {
      "description": "Unique identifiers for this endpoint from outside CCE\n\n+deepequal-gen=true",
      "type": "object",
      "properties": {
        "cnidriver": {
          "description": "device driver name",
          "type": "string"
        },
        "container-id": {
          "description": "ID assigned by container runtime",
          "type": "string"
        },
        "container-name": {
          "description": "Name assigned to container",
          "type": "string"
        },
        "external-identifier": {
          "description": "External network ID, such as the ID of the ENI occupied by the container",
          "type": "string"
        },
        "k8s-namespace": {
          "description": "K8s namespace for this endpoint",
          "type": "string"
        },
        "k8s-object-id": {
          "description": "K8s object id to indentifier a unique object",
          "type": "string"
        },
        "k8s-pod-name": {
          "description": "K8s pod name for this endpoint",
          "type": "string"
        },
        "netns": {
          "description": "netns use by CNI",
          "type": "string"
        },
        "pod-name": {
          "description": "K8s pod for this endpoint(Deprecated, use K8sPodName and K8sNamespace instead)",
          "type": "string"
        }
      }
    },
    "EndpointProbeResponse": {
      "description": "EndpointProbeResponse is the response of probe endpoint\n",
      "type": "object",
      "properties": {
        "bandWidth": {
          "x-omitempty": true,
          "$ref": "#/definitions/BandwidthOption"
        },
        "featureGates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtFeatureData"
          },
          "x-omitempty": true
        }
      }
    },
    "EndpointState": {
      "description": "State of endpoint",
      "type": "string",
      "enum": [
        "waiting-for-identity",
        "not-ready",
        "waiting-to-regenerate",
        "regenerating",
        "restoring",
        "ready",
        "disconnecting",
        "disconnected",
        "invalid",
        "ip-allocated",
        "pod-deleted"
      ]
    },
    "EndpointStatusChange": {
      "description": "Indication of a change of status\n\n+deepequal-gen=true",
      "type": "object",
      "properties": {
        "code": {
          "description": "Code indicate type of status change",
          "type": "string",
          "enum": [
            "ok",
            "failed"
          ]
        },
        "message": {
          "description": "Status message",
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/EndpointState"
        },
        "timestamp": {
          "description": "Timestamp when status change occurred",
          "type": "string"
        }
      }
    },
    "EndpointStatusLog": {
      "description": "Status log of endpoint",
      "type": "array",
      "items": {
        "$ref": "#/definitions/EndpointStatusChange"
      }
    },
    "Error": {
      "type": "string"
    },
    "ExtFeatureData": {
      "description": "ExtFeatureData is a map",
      "type": "object",
      "additionalProperties": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      }
    },
    "IPAMAddressResponse": {
      "description": "IPAM configuration of an individual address family",
      "type": "object",
      "properties": {
        "cidrs": {
          "description": "List of CIDRs out of which IPs are allocated",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "expiration-uuid": {
          "description": "The UUID for the expiration timer. Set when expiration has been\nenabled while allocating.\n",
          "type": "string"
        },
        "gateway": {
          "description": "IP of gateway",
          "type": "string"
        },
        "interface-number": {
          "description": "InterfaceNumber is a field for generically identifying an interface. This is only useful in ENI mode.\n",
          "type": "string"
        },
        "ip": {
          "description": "Allocated IP for endpoint",
          "type": "string"
        },
        "master-mac": {
          "description": "MAC of master interface if address is a slave/secondary of a master interface",
          "type": "string"
        }
      }
    },
    "IPAMResponse": {
      "description": "IPAM configuration of an endpoint",
      "type": "object",
      "required": [
        "address",
        "host-addressing"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/AddressPair"
        },
        "host-addressing": {
          "$ref": "#/definitions/NodeAddressing"
        },
        "ipv4": {
          "$ref": "#/definitions/IPAMAddressResponse"
        },
        "ipv6": {
          "$ref": "#/definitions/IPAMAddressResponse"
        }
      }
    },
    "Metric": {
      "description": "Metric information",
      "type": "object",
      "properties": {
        "labels": {
          "description": "Labels of the metric",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name of the metric",
          "type": "string"
        },
        "value": {
          "description": "Value of the metric",
          "type": "number"
        }
      }
    },
    "NodeAddressing": {
      "description": "Addressing information of a node for all address families\n\n+k8s:deepcopy-gen=true",
      "type": "object",
      "properties": {
        "ipv4": {
          "$ref": "#/definitions/NodeAddressingElement"
        },
        "ipv6": {
          "$ref": "#/definitions/NodeAddressingElement"
        }
      }
    },
    "NodeAddressingElement": {
      "description": "Addressing information",
      "type": "object",
      "properties": {
        "address-type": {
          "description": "Node address type, one of HostName, ExternalIP or InternalIP",
          "type": "string"
        },
        "alloc-range": {
          "description": "Address pool to be used for local endpoints",
          "type": "string"
        },
        "enabled": {
          "description": "True if address family is enabled",
          "type": "boolean"
        },
        "ip": {
          "description": "IP address of node",
          "type": "string"
        }
      }
    },
    "PrivateIP": {
      "description": "VPC IP address\n\n+k8s:deepcopy-gen=true\n",
      "type": "object",
      "properties": {
        "cidrAddress": {
          "type": "string"
        },
        "gatewayIP": {
          "type": "string"
        },
        "primary": {
          "type": "boolean"
        },
        "privateIPAddress": {
          "type": "string"
        },
        "publicIPAddress": {
          "type": "string"
        },
        "subnetID": {
          "description": "SubnetID subnet id of  private ip assigned with this.\nWhen allocating IP across subnets, the subnet of private IP may be\ndifferent from ENI\n",
          "type": "string"
        }
      }
    },
    "Status": {
      "description": "Status of an individual component\n\n+k8s:deepcopy-gen=true\n",
      "type": "object",
      "properties": {
        "msg": {
          "description": "Human readable status/error/warning message",
          "type": "string"
        },
        "state": {
          "description": "State the component is in",
          "type": "string",
          "enum": [
            "Ok",
            "Warning",
            "Failure",
            "Disabled"
          ]
        }
      }
    },
    "StatusResponse": {
      "description": "Health and status information of daemon\n\n+k8s:deepcopy-gen=true",
      "type": "object",
      "properties": {
        "cce": {
          "description": "Status of CCE daemon",
          "$ref": "#/definitions/Status"
        },
        "client-id": {
          "description": "When supported by the API, this client ID should be used by the\nclient when making another request to the server.\nSee for example \"/cluster/nodes\".\n",
          "type": "string"
        },
        "container-runtime": {
          "description": "Status of local container runtime",
          "$ref": "#/definitions/Status"
        },
        "controllers": {
          "description": "Status of all endpoint controllers",
          "$ref": "#/definitions/ControllerStatuses"
        },
        "stale": {
          "description": "List of stale information in the status",
          "type": "object",
          "additionalProperties": {
            "description": "Timestamp when the probe was started",
            "type": "string",
            "format": "date-time"
          }
        }
      }
    }
  },
  "parameters": {
    "cidr": {
      "type": "string",
      "description": "A CIDR range of IPs",
      "name": "cidr",
      "in": "query"
    },
    "cni-driver": {
      "type": "string",
      "name": "cni-driver",
      "in": "query"
    },
    "eni-spec": {
      "description": "Expectations when applying for ENI",
      "name": "eni",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/ENI"
      }
    },
    "ipam-containerid": {
      "type": "string",
      "description": "container id provider by cni",
      "name": "containerID",
      "in": "query"
    },
    "ipam-expiration": {
      "type": "boolean",
      "name": "expiration",
      "in": "header"
    },
    "ipam-family": {
      "enum": [
        "ipv4",
        "ipv6"
      ],
      "type": "string",
      "name": "family",
      "in": "query"
    },
    "ipam-ifname": {
      "type": "string",
      "description": "ifname provider by cni",
      "name": "ifname",
      "in": "query"
    },
    "ipam-ip": {
      "type": "string",
      "description": "IP address",
      "name": "ip",
      "in": "path",
      "required": true
    },
    "ipam-netns": {
      "type": "string",
      "description": "netns provider by cni",
      "name": "netns",
      "in": "query"
    },
    "ipam-owner": {
      "type": "string",
      "name": "owner",
      "in": "query"
    },
    "ipam-release-arg": {
      "type": "string",
      "description": "IP address or owner name",
      "name": "ip",
      "in": "path",
      "required": true
    },
    "pod-name": {
      "type": "string",
      "description": "K8s pod name\n",
      "name": "pod",
      "in": "path",
      "required": true
    },
    "source": {
      "type": "string",
      "description": "Source from which FQDN entries come from",
      "name": "source",
      "in": "query"
    }
  },
  "x-schemes": [
    "unix"
  ]
}`))
}
