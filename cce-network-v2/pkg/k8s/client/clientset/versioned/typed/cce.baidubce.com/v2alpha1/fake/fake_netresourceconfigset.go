/*
 * Copyright (c) 2023 Baidu, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 *
 */

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v2alpha1 "github.com/baidubce/baiducloud-cce-cni-driver/cce-network-v2/pkg/k8s/apis/cce.baidubce.com/v2alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeNetResourceConfigSets implements NetResourceConfigSetInterface
type FakeNetResourceConfigSets struct {
	Fake *FakeCceV2alpha1
}

var netresourceconfigsetsResource = schema.GroupVersionResource{Group: "cce.baidubce.com", Version: "v2alpha1", Resource: "netresourceconfigsets"}

var netresourceconfigsetsKind = schema.GroupVersionKind{Group: "cce.baidubce.com", Version: "v2alpha1", Kind: "NetResourceConfigSet"}

// Get takes name of the netResourceConfigSet, and returns the corresponding netResourceConfigSet object, and an error if there is any.
func (c *FakeNetResourceConfigSets) Get(ctx context.Context, name string, options v1.GetOptions) (result *v2alpha1.NetResourceConfigSet, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(netresourceconfigsetsResource, name), &v2alpha1.NetResourceConfigSet{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v2alpha1.NetResourceConfigSet), err
}

// List takes label and field selectors, and returns the list of NetResourceConfigSets that match those selectors.
func (c *FakeNetResourceConfigSets) List(ctx context.Context, opts v1.ListOptions) (result *v2alpha1.NetResourceConfigSetList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(netresourceconfigsetsResource, netresourceconfigsetsKind, opts), &v2alpha1.NetResourceConfigSetList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v2alpha1.NetResourceConfigSetList{ListMeta: obj.(*v2alpha1.NetResourceConfigSetList).ListMeta}
	for _, item := range obj.(*v2alpha1.NetResourceConfigSetList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested netResourceConfigSets.
func (c *FakeNetResourceConfigSets) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(netresourceconfigsetsResource, opts))
}

// Create takes the representation of a netResourceConfigSet and creates it.  Returns the server's representation of the netResourceConfigSet, and an error, if there is any.
func (c *FakeNetResourceConfigSets) Create(ctx context.Context, netResourceConfigSet *v2alpha1.NetResourceConfigSet, opts v1.CreateOptions) (result *v2alpha1.NetResourceConfigSet, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(netresourceconfigsetsResource, netResourceConfigSet), &v2alpha1.NetResourceConfigSet{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v2alpha1.NetResourceConfigSet), err
}

// Update takes the representation of a netResourceConfigSet and updates it. Returns the server's representation of the netResourceConfigSet, and an error, if there is any.
func (c *FakeNetResourceConfigSets) Update(ctx context.Context, netResourceConfigSet *v2alpha1.NetResourceConfigSet, opts v1.UpdateOptions) (result *v2alpha1.NetResourceConfigSet, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(netresourceconfigsetsResource, netResourceConfigSet), &v2alpha1.NetResourceConfigSet{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v2alpha1.NetResourceConfigSet), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeNetResourceConfigSets) UpdateStatus(ctx context.Context, netResourceConfigSet *v2alpha1.NetResourceConfigSet, opts v1.UpdateOptions) (*v2alpha1.NetResourceConfigSet, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(netresourceconfigsetsResource, "status", netResourceConfigSet), &v2alpha1.NetResourceConfigSet{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v2alpha1.NetResourceConfigSet), err
}

// Delete takes name of the netResourceConfigSet and deletes it. Returns an error if one occurs.
func (c *FakeNetResourceConfigSets) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(netresourceconfigsetsResource, name, opts), &v2alpha1.NetResourceConfigSet{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeNetResourceConfigSets) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(netresourceconfigsetsResource, listOpts)

	_, err := c.Fake.Invokes(action, &v2alpha1.NetResourceConfigSetList{})
	return err
}

// Patch applies the patch and returns the patched netResourceConfigSet.
func (c *FakeNetResourceConfigSets) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v2alpha1.NetResourceConfigSet, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(netresourceconfigsetsResource, name, pt, data, subresources...), &v2alpha1.NetResourceConfigSet{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v2alpha1.NetResourceConfigSet), err
}
